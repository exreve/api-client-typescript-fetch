/* tslint:disable */
/* eslint-disable */
/**
 * ExKoin API Documentation
 * API documentation for ExKoin Crypto exchange
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PublicNetworksGet200ResponseInner } from './PublicNetworksGet200ResponseInner';
import {
    PublicNetworksGet200ResponseInnerFromJSON,
    PublicNetworksGet200ResponseInnerFromJSONTyped,
    PublicNetworksGet200ResponseInnerToJSON,
    PublicNetworksGet200ResponseInnerToJSONTyped,
} from './PublicNetworksGet200ResponseInner';
import type { PublicCurrenciesGet200ResponseInner } from './PublicCurrenciesGet200ResponseInner';
import {
    PublicCurrenciesGet200ResponseInnerFromJSON,
    PublicCurrenciesGet200ResponseInnerFromJSONTyped,
    PublicCurrenciesGet200ResponseInnerToJSON,
    PublicCurrenciesGet200ResponseInnerToJSONTyped,
} from './PublicCurrenciesGet200ResponseInner';

/**
 * 
 * @export
 * @interface PrivateWithdrawalsDetailGet200Response
 */
export interface PrivateWithdrawalsDetailGet200Response {
    /**
     * 
     * @type {PublicCurrenciesGet200ResponseInner}
     * @memberof PrivateWithdrawalsDetailGet200Response
     */
    currency: PublicCurrenciesGet200ResponseInner;
    /**
     * 
     * @type {PublicNetworksGet200ResponseInner}
     * @memberof PrivateWithdrawalsDetailGet200Response
     */
    network: PublicNetworksGet200ResponseInner;
    /**
     * 
     * @type {string}
     * @memberof PrivateWithdrawalsDetailGet200Response
     */
    balance: string;
    /**
     * 
     * @type {string}
     * @memberof PrivateWithdrawalsDetailGet200Response
     */
    feeUsd: string;
    /**
     * 
     * @type {string}
     * @memberof PrivateWithdrawalsDetailGet200Response
     */
    feeInCurrency: string;
    /**
     * 
     * @type {string}
     * @memberof PrivateWithdrawalsDetailGet200Response
     */
    maxWithdrawExchange: string;
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof PrivateWithdrawalsDetailGet200Response
     */
    availableHot: { [key: string]: string | undefined; };
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof PrivateWithdrawalsDetailGet200Response
     */
    availableHotAndCold: { [key: string]: string | undefined; };
    /**
     * 
     * @type {string}
     * @memberof PrivateWithdrawalsDetailGet200Response
     */
    addressRegex: string;
    /**
     * 
     * @type {string}
     * @memberof PrivateWithdrawalsDetailGet200Response
     */
    minWithdrawAmount: string;
    /**
     * 
     * @type {any}
     * @memberof PrivateWithdrawalsDetailGet200Response
     */
    isMemoRequired?: any | null;
}

/**
 * Check if a given object implements the PrivateWithdrawalsDetailGet200Response interface.
 */
export function instanceOfPrivateWithdrawalsDetailGet200Response(value: object): value is PrivateWithdrawalsDetailGet200Response {
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('network' in value) || value['network'] === undefined) return false;
    if (!('balance' in value) || value['balance'] === undefined) return false;
    if (!('feeUsd' in value) || value['feeUsd'] === undefined) return false;
    if (!('feeInCurrency' in value) || value['feeInCurrency'] === undefined) return false;
    if (!('maxWithdrawExchange' in value) || value['maxWithdrawExchange'] === undefined) return false;
    if (!('availableHot' in value) || value['availableHot'] === undefined) return false;
    if (!('availableHotAndCold' in value) || value['availableHotAndCold'] === undefined) return false;
    if (!('addressRegex' in value) || value['addressRegex'] === undefined) return false;
    if (!('minWithdrawAmount' in value) || value['minWithdrawAmount'] === undefined) return false;
    return true;
}

export function PrivateWithdrawalsDetailGet200ResponseFromJSON(json: any): PrivateWithdrawalsDetailGet200Response {
    return PrivateWithdrawalsDetailGet200ResponseFromJSONTyped(json, false);
}

export function PrivateWithdrawalsDetailGet200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PrivateWithdrawalsDetailGet200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'currency': PublicCurrenciesGet200ResponseInnerFromJSON(json['currency']),
        'network': PublicNetworksGet200ResponseInnerFromJSON(json['network']),
        'balance': json['balance'],
        'feeUsd': json['fee_usd'],
        'feeInCurrency': json['fee_in_currency'],
        'maxWithdrawExchange': json['max_withdraw_exchange'],
        'availableHot': json['available_hot'],
        'availableHotAndCold': json['available_hot_and_cold'],
        'addressRegex': json['address_regex'],
        'minWithdrawAmount': json['min_withdraw_amount'],
        'isMemoRequired': json['is_memo_required'] == null ? undefined : json['is_memo_required'],
    };
}

export function PrivateWithdrawalsDetailGet200ResponseToJSON(json: any): PrivateWithdrawalsDetailGet200Response {
    return PrivateWithdrawalsDetailGet200ResponseToJSONTyped(json, false);
}

export function PrivateWithdrawalsDetailGet200ResponseToJSONTyped(value?: PrivateWithdrawalsDetailGet200Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'currency': PublicCurrenciesGet200ResponseInnerToJSON(value['currency']),
        'network': PublicNetworksGet200ResponseInnerToJSON(value['network']),
        'balance': value['balance'],
        'fee_usd': value['feeUsd'],
        'fee_in_currency': value['feeInCurrency'],
        'max_withdraw_exchange': value['maxWithdrawExchange'],
        'available_hot': value['availableHot'],
        'available_hot_and_cold': value['availableHotAndCold'],
        'address_regex': value['addressRegex'],
        'min_withdraw_amount': value['minWithdrawAmount'],
        'is_memo_required': value['isMemoRequired'],
    };
}

