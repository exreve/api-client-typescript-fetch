/* tslint:disable */
/* eslint-disable */
/**
 * ExKoin API Documentation
 * API documentation for ExKoin Crypto exchange
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PrivateWithdrawalsFinishPost200Response
 */
export interface PrivateWithdrawalsFinishPost200Response {
    /**
     * 
     * @type {string}
     * @memberof PrivateWithdrawalsFinishPost200Response
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof PrivateWithdrawalsFinishPost200Response
     */
    currency: string;
    /**
     * 
     * @type {string}
     * @memberof PrivateWithdrawalsFinishPost200Response
     */
    amount: string;
    /**
     * 
     * @type {string}
     * @memberof PrivateWithdrawalsFinishPost200Response
     */
    userFee: string;
    /**
     * 
     * @type {string}
     * @memberof PrivateWithdrawalsFinishPost200Response
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof PrivateWithdrawalsFinishPost200Response
     */
    address: string;
    /**
     * 
     * @type {string}
     * @memberof PrivateWithdrawalsFinishPost200Response
     */
    fromAddress: string;
    /**
     * 
     * @type {string}
     * @memberof PrivateWithdrawalsFinishPost200Response
     */
    network: string;
    /**
     * 
     * @type {string}
     * @memberof PrivateWithdrawalsFinishPost200Response
     */
    status: PrivateWithdrawalsFinishPost200ResponseStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof PrivateWithdrawalsFinishPost200Response
     */
    timestamp: number;
    /**
     * 
     * @type {string}
     * @memberof PrivateWithdrawalsFinishPost200Response
     */
    memo?: string;
    /**
     * 
     * @type {string}
     * @memberof PrivateWithdrawalsFinishPost200Response
     */
    txid?: string;
}


/**
 * @export
 */
export const PrivateWithdrawalsFinishPost200ResponseStatusEnum = {
    Pending: 'pending',
    Processing: 'processing',
    Completed: 'completed',
    Failed: 'failed',
    Cancelled: 'cancelled'
} as const;
export type PrivateWithdrawalsFinishPost200ResponseStatusEnum = typeof PrivateWithdrawalsFinishPost200ResponseStatusEnum[keyof typeof PrivateWithdrawalsFinishPost200ResponseStatusEnum];


/**
 * Check if a given object implements the PrivateWithdrawalsFinishPost200Response interface.
 */
export function instanceOfPrivateWithdrawalsFinishPost200Response(value: object): value is PrivateWithdrawalsFinishPost200Response {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('userFee' in value) || value['userFee'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('address' in value) || value['address'] === undefined) return false;
    if (!('fromAddress' in value) || value['fromAddress'] === undefined) return false;
    if (!('network' in value) || value['network'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function PrivateWithdrawalsFinishPost200ResponseFromJSON(json: any): PrivateWithdrawalsFinishPost200Response {
    return PrivateWithdrawalsFinishPost200ResponseFromJSONTyped(json, false);
}

export function PrivateWithdrawalsFinishPost200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PrivateWithdrawalsFinishPost200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'currency': json['currency'],
        'amount': json['amount'],
        'userFee': json['user_fee'],
        'message': json['message'],
        'address': json['address'],
        'fromAddress': json['from_address'],
        'network': json['network'],
        'status': json['status'],
        'timestamp': json['timestamp'],
        'memo': json['memo'] == null ? undefined : json['memo'],
        'txid': json['txid'] == null ? undefined : json['txid'],
    };
}

export function PrivateWithdrawalsFinishPost200ResponseToJSON(json: any): PrivateWithdrawalsFinishPost200Response {
    return PrivateWithdrawalsFinishPost200ResponseToJSONTyped(json, false);
}

export function PrivateWithdrawalsFinishPost200ResponseToJSONTyped(value?: PrivateWithdrawalsFinishPost200Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'currency': value['currency'],
        'amount': value['amount'],
        'user_fee': value['userFee'],
        'message': value['message'],
        'address': value['address'],
        'from_address': value['fromAddress'],
        'network': value['network'],
        'status': value['status'],
        'timestamp': value['timestamp'],
        'memo': value['memo'],
        'txid': value['txid'],
    };
}

