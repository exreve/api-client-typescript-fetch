/* tslint:disable */
/* eslint-disable */
/**
 * ExKoin API Documentation
 * API documentation for ExKoin Crypto exchange
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PrivateOrdersCancelAllPostRequest,
  PrivateOrdersCancelPostRequest,
  PrivateOrdersGet200ResponseInner,
  PrivateOrdersPostRequest,
  PrivateTradesGet200ResponseInner,
  PublicCurrenciesGetDefaultResponse,
} from '../models/index';
import {
    PrivateOrdersCancelAllPostRequestFromJSON,
    PrivateOrdersCancelAllPostRequestToJSON,
    PrivateOrdersCancelPostRequestFromJSON,
    PrivateOrdersCancelPostRequestToJSON,
    PrivateOrdersGet200ResponseInnerFromJSON,
    PrivateOrdersGet200ResponseInnerToJSON,
    PrivateOrdersPostRequestFromJSON,
    PrivateOrdersPostRequestToJSON,
    PrivateTradesGet200ResponseInnerFromJSON,
    PrivateTradesGet200ResponseInnerToJSON,
    PublicCurrenciesGetDefaultResponseFromJSON,
    PublicCurrenciesGetDefaultResponseToJSON,
} from '../models/index';

export interface PrivateOrdersCancelAllPostOperationRequest {
    privateOrdersCancelAllPostRequest: PrivateOrdersCancelAllPostRequest;
}

export interface PrivateOrdersCancelPostOperationRequest {
    privateOrdersCancelPostRequest: PrivateOrdersCancelPostRequest;
}

export interface PrivateOrdersGetRequest {
    symbol?: string;
    isOpen?: any;
    hasFilled?: any;
    side?: PrivateOrdersGetSideEnum;
    page?: number;
    limit?: number;
}

export interface PrivateOrdersPostOperationRequest {
    privateOrdersPostRequest: PrivateOrdersPostRequest;
}

export interface PrivateTradesGetRequest {
    symbol?: string;
    side?: PrivateTradesGetSideEnum;
    takerOrMaker?: PrivateTradesGetTakerOrMakerEnum;
    page?: number;
    limit?: number;
}

/**
 * TradeApi - interface
 * 
 * @export
 * @interface TradeApiInterface
 */
export interface TradeApiInterface {
    /**
     * Cancel all orders for a user
     * @param {PrivateOrdersCancelAllPostRequest} privateOrdersCancelAllPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    privateOrdersCancelAllPostRaw(requestParameters: PrivateOrdersCancelAllPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivateOrdersGet200ResponseInner>>>;

    /**
     * Cancel all orders for a user
     */
    privateOrdersCancelAllPost(requestParameters: PrivateOrdersCancelAllPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivateOrdersGet200ResponseInner>>;

    /**
     * Cancel an order
     * @param {PrivateOrdersCancelPostRequest} privateOrdersCancelPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    privateOrdersCancelPostRaw(requestParameters: PrivateOrdersCancelPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateOrdersGet200ResponseInner>>;

    /**
     * Cancel an order
     */
    privateOrdersCancelPost(requestParameters: PrivateOrdersCancelPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateOrdersGet200ResponseInner>;

    /**
     * Get the user orders
     * @param {string} [symbol] 
     * @param {any} [isOpen] 
     * @param {any} [hasFilled] 
     * @param {'buy' | 'sell'} [side] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    privateOrdersGetRaw(requestParameters: PrivateOrdersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivateOrdersGet200ResponseInner>>>;

    /**
     * Get the user orders
     */
    privateOrdersGet(requestParameters: PrivateOrdersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivateOrdersGet200ResponseInner>>;

    /**
     * Create a new order
     * @param {PrivateOrdersPostRequest} privateOrdersPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    privateOrdersPostRaw(requestParameters: PrivateOrdersPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateOrdersGet200ResponseInner>>;

    /**
     * Create a new order
     */
    privateOrdersPost(requestParameters: PrivateOrdersPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateOrdersGet200ResponseInner>;

    /**
     * Get the user trades
     * @param {string} [symbol] 
     * @param {'buy' | 'sell'} [side] 
     * @param {'maker' | 'taker'} [takerOrMaker] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApiInterface
     */
    privateTradesGetRaw(requestParameters: PrivateTradesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivateTradesGet200ResponseInner>>>;

    /**
     * Get the user trades
     */
    privateTradesGet(requestParameters: PrivateTradesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivateTradesGet200ResponseInner>>;

}

/**
 * 
 */
export class TradeApi extends runtime.BaseAPI implements TradeApiInterface {

    /**
     * Cancel all orders for a user
     */
    async privateOrdersCancelAllPostRaw(requestParameters: PrivateOrdersCancelAllPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivateOrdersGet200ResponseInner>>> {
        if (requestParameters['privateOrdersCancelAllPostRequest'] == null) {
            throw new runtime.RequiredError(
                'privateOrdersCancelAllPostRequest',
                'Required parameter "privateOrdersCancelAllPostRequest" was null or undefined when calling privateOrdersCancelAllPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-SIGN"] = await this.configuration.apiKey("X-API-SIGN"); // signature authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessiontoken"] = await this.configuration.apiKey("sessiontoken"); // sessionToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-NONCE"] = await this.configuration.apiKey("X-API-NONCE"); // nonce authentication
        }

        const response = await this.request({
            path: `/private/orders/cancel-all`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PrivateOrdersCancelAllPostRequestToJSON(requestParameters['privateOrdersCancelAllPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PrivateOrdersGet200ResponseInnerFromJSON));
    }

    /**
     * Cancel all orders for a user
     */
    async privateOrdersCancelAllPost(requestParameters: PrivateOrdersCancelAllPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivateOrdersGet200ResponseInner>> {
        const response = await this.privateOrdersCancelAllPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel an order
     */
    async privateOrdersCancelPostRaw(requestParameters: PrivateOrdersCancelPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateOrdersGet200ResponseInner>> {
        if (requestParameters['privateOrdersCancelPostRequest'] == null) {
            throw new runtime.RequiredError(
                'privateOrdersCancelPostRequest',
                'Required parameter "privateOrdersCancelPostRequest" was null or undefined when calling privateOrdersCancelPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-SIGN"] = await this.configuration.apiKey("X-API-SIGN"); // signature authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessiontoken"] = await this.configuration.apiKey("sessiontoken"); // sessionToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-NONCE"] = await this.configuration.apiKey("X-API-NONCE"); // nonce authentication
        }

        const response = await this.request({
            path: `/private/orders/cancel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PrivateOrdersCancelPostRequestToJSON(requestParameters['privateOrdersCancelPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivateOrdersGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Cancel an order
     */
    async privateOrdersCancelPost(requestParameters: PrivateOrdersCancelPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateOrdersGet200ResponseInner> {
        const response = await this.privateOrdersCancelPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the user orders
     */
    async privateOrdersGetRaw(requestParameters: PrivateOrdersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivateOrdersGet200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['symbol'] != null) {
            queryParameters['symbol'] = requestParameters['symbol'];
        }

        if (requestParameters['isOpen'] != null) {
            queryParameters['is_open'] = requestParameters['isOpen'];
        }

        if (requestParameters['hasFilled'] != null) {
            queryParameters['has_filled'] = requestParameters['hasFilled'];
        }

        if (requestParameters['side'] != null) {
            queryParameters['side'] = requestParameters['side'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-SIGN"] = await this.configuration.apiKey("X-API-SIGN"); // signature authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessiontoken"] = await this.configuration.apiKey("sessiontoken"); // sessionToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-NONCE"] = await this.configuration.apiKey("X-API-NONCE"); // nonce authentication
        }

        const response = await this.request({
            path: `/private/orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PrivateOrdersGet200ResponseInnerFromJSON));
    }

    /**
     * Get the user orders
     */
    async privateOrdersGet(requestParameters: PrivateOrdersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivateOrdersGet200ResponseInner>> {
        const response = await this.privateOrdersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new order
     */
    async privateOrdersPostRaw(requestParameters: PrivateOrdersPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateOrdersGet200ResponseInner>> {
        if (requestParameters['privateOrdersPostRequest'] == null) {
            throw new runtime.RequiredError(
                'privateOrdersPostRequest',
                'Required parameter "privateOrdersPostRequest" was null or undefined when calling privateOrdersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-SIGN"] = await this.configuration.apiKey("X-API-SIGN"); // signature authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessiontoken"] = await this.configuration.apiKey("sessiontoken"); // sessionToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-NONCE"] = await this.configuration.apiKey("X-API-NONCE"); // nonce authentication
        }

        const response = await this.request({
            path: `/private/orders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PrivateOrdersPostRequestToJSON(requestParameters['privateOrdersPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivateOrdersGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Create a new order
     */
    async privateOrdersPost(requestParameters: PrivateOrdersPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateOrdersGet200ResponseInner> {
        const response = await this.privateOrdersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the user trades
     */
    async privateTradesGetRaw(requestParameters: PrivateTradesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivateTradesGet200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['symbol'] != null) {
            queryParameters['symbol'] = requestParameters['symbol'];
        }

        if (requestParameters['side'] != null) {
            queryParameters['side'] = requestParameters['side'];
        }

        if (requestParameters['takerOrMaker'] != null) {
            queryParameters['taker_or_maker'] = requestParameters['takerOrMaker'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-SIGN"] = await this.configuration.apiKey("X-API-SIGN"); // signature authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessiontoken"] = await this.configuration.apiKey("sessiontoken"); // sessionToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-NONCE"] = await this.configuration.apiKey("X-API-NONCE"); // nonce authentication
        }

        const response = await this.request({
            path: `/private/trades`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PrivateTradesGet200ResponseInnerFromJSON));
    }

    /**
     * Get the user trades
     */
    async privateTradesGet(requestParameters: PrivateTradesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivateTradesGet200ResponseInner>> {
        const response = await this.privateTradesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PrivateOrdersGetSideEnum = {
    Buy: 'buy',
    Sell: 'sell'
} as const;
export type PrivateOrdersGetSideEnum = typeof PrivateOrdersGetSideEnum[keyof typeof PrivateOrdersGetSideEnum];
/**
 * @export
 */
export const PrivateTradesGetSideEnum = {
    Buy: 'buy',
    Sell: 'sell'
} as const;
export type PrivateTradesGetSideEnum = typeof PrivateTradesGetSideEnum[keyof typeof PrivateTradesGetSideEnum];
/**
 * @export
 */
export const PrivateTradesGetTakerOrMakerEnum = {
    Maker: 'maker',
    Taker: 'taker'
} as const;
export type PrivateTradesGetTakerOrMakerEnum = typeof PrivateTradesGetTakerOrMakerEnum[keyof typeof PrivateTradesGetTakerOrMakerEnum];
