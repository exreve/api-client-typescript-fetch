/* tslint:disable */
/* eslint-disable */
/**
 * ExKoin API Documentation
 * API documentation for ExKoin Crypto exchange
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PrivatePoolJoinPost200Response,
  PrivatePoolJoinPostRequest,
  PrivatePoolLeavePostRequest,
  PrivatePoolPositionsGet200ResponseInner,
  PrivatePoolTasksGet200ResponseInner,
  PublicCurrenciesGetDefaultResponse,
  PublicPoolStateGet200Response,
  PublicPoolsGet200ResponseInner,
} from '../models/index';
import {
    PrivatePoolJoinPost200ResponseFromJSON,
    PrivatePoolJoinPost200ResponseToJSON,
    PrivatePoolJoinPostRequestFromJSON,
    PrivatePoolJoinPostRequestToJSON,
    PrivatePoolLeavePostRequestFromJSON,
    PrivatePoolLeavePostRequestToJSON,
    PrivatePoolPositionsGet200ResponseInnerFromJSON,
    PrivatePoolPositionsGet200ResponseInnerToJSON,
    PrivatePoolTasksGet200ResponseInnerFromJSON,
    PrivatePoolTasksGet200ResponseInnerToJSON,
    PublicCurrenciesGetDefaultResponseFromJSON,
    PublicCurrenciesGetDefaultResponseToJSON,
    PublicPoolStateGet200ResponseFromJSON,
    PublicPoolStateGet200ResponseToJSON,
    PublicPoolsGet200ResponseInnerFromJSON,
    PublicPoolsGet200ResponseInnerToJSON,
} from '../models/index';

export interface PrivatePoolJoinPostOperationRequest {
    privatePoolJoinPostRequest: PrivatePoolJoinPostRequest;
}

export interface PrivatePoolLeavePostOperationRequest {
    privatePoolLeavePostRequest: PrivatePoolLeavePostRequest;
}

export interface PrivatePoolTaskGetRequest {
    taskId: string;
}

export interface PrivatePoolTasksGetRequest {
    poolId?: string;
    type?: PrivatePoolTasksGetTypeEnum;
    status?: PrivatePoolTasksGetStatusEnum;
    page?: number;
    limit?: number;
    startTime?: number;
    endTime?: number;
}

export interface PublicPoolStateGetRequest {
    symbol: string;
}

/**
 * PoolApi - interface
 * 
 * @export
 * @interface PoolApiInterface
 */
export interface PoolApiInterface {
    /**
     * Join a pool, it will deduct the currencies from your balance, and you will be credited the corresponding lp token
     * @param {PrivatePoolJoinPostRequest} privatePoolJoinPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolApiInterface
     */
    privatePoolJoinPostRaw(requestParameters: PrivatePoolJoinPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivatePoolJoinPost200Response>>;

    /**
     * Join a pool, it will deduct the currencies from your balance, and you will be credited the corresponding lp token
     */
    privatePoolJoinPost(requestParameters: PrivatePoolJoinPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivatePoolJoinPost200Response>;

    /**
     * Leave a pool, it consumes the lp token and credits your balance with the corresponding currencies
     * @param {PrivatePoolLeavePostRequest} privatePoolLeavePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolApiInterface
     */
    privatePoolLeavePostRaw(requestParameters: PrivatePoolLeavePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivatePoolJoinPost200Response>>;

    /**
     * Leave a pool, it consumes the lp token and credits your balance with the corresponding currencies
     */
    privatePoolLeavePost(requestParameters: PrivatePoolLeavePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivatePoolJoinPost200Response>;

    /**
     * Get the user pool positions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolApiInterface
     */
    privatePoolPositionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivatePoolPositionsGet200ResponseInner>>>;

    /**
     * Get the user pool positions
     */
    privatePoolPositionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivatePoolPositionsGet200ResponseInner>>;

    /**
     * get a pool task (join/leave) by id
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolApiInterface
     */
    privatePoolTaskGetRaw(requestParameters: PrivatePoolTaskGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivatePoolTasksGet200ResponseInner>>;

    /**
     * get a pool task (join/leave) by id
     */
    privatePoolTaskGet(requestParameters: PrivatePoolTaskGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivatePoolTasksGet200ResponseInner>;

    /**
     * Get the user pool tasks (join/leave)
     * @param {string} [poolId] 
     * @param {'join' | 'leave'} [type] 
     * @param {'pending' | 'processing' | 'completed' | 'failed' | 'cancelled'} [status] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {number} [startTime] 
     * @param {number} [endTime] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolApiInterface
     */
    privatePoolTasksGetRaw(requestParameters: PrivatePoolTasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivatePoolTasksGet200ResponseInner>>>;

    /**
     * Get the user pool tasks (join/leave)
     */
    privatePoolTasksGet(requestParameters: PrivatePoolTasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivatePoolTasksGet200ResponseInner>>;

    /**
     * Get the public pool state (price, balance, positions)
     * @param {string} symbol 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolApiInterface
     */
    publicPoolStateGetRaw(requestParameters: PublicPoolStateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicPoolStateGet200Response>>;

    /**
     * Get the public pool state (price, balance, positions)
     */
    publicPoolStateGet(requestParameters: PublicPoolStateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicPoolStateGet200Response>;

    /**
     * Get all active pools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolApiInterface
     */
    publicPoolsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicPoolsGet200ResponseInner>>>;

    /**
     * Get all active pools
     */
    publicPoolsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicPoolsGet200ResponseInner>>;

}

/**
 * 
 */
export class PoolApi extends runtime.BaseAPI implements PoolApiInterface {

    /**
     * Join a pool, it will deduct the currencies from your balance, and you will be credited the corresponding lp token
     */
    async privatePoolJoinPostRaw(requestParameters: PrivatePoolJoinPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivatePoolJoinPost200Response>> {
        if (requestParameters['privatePoolJoinPostRequest'] == null) {
            throw new runtime.RequiredError(
                'privatePoolJoinPostRequest',
                'Required parameter "privatePoolJoinPostRequest" was null or undefined when calling privatePoolJoinPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-SIGN"] = await this.configuration.apiKey("X-API-SIGN"); // signature authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessiontoken"] = await this.configuration.apiKey("sessiontoken"); // sessionToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-NONCE"] = await this.configuration.apiKey("X-API-NONCE"); // nonce authentication
        }

        const response = await this.request({
            path: `/private/pool/join`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PrivatePoolJoinPostRequestToJSON(requestParameters['privatePoolJoinPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivatePoolJoinPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Join a pool, it will deduct the currencies from your balance, and you will be credited the corresponding lp token
     */
    async privatePoolJoinPost(requestParameters: PrivatePoolJoinPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivatePoolJoinPost200Response> {
        const response = await this.privatePoolJoinPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Leave a pool, it consumes the lp token and credits your balance with the corresponding currencies
     */
    async privatePoolLeavePostRaw(requestParameters: PrivatePoolLeavePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivatePoolJoinPost200Response>> {
        if (requestParameters['privatePoolLeavePostRequest'] == null) {
            throw new runtime.RequiredError(
                'privatePoolLeavePostRequest',
                'Required parameter "privatePoolLeavePostRequest" was null or undefined when calling privatePoolLeavePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-SIGN"] = await this.configuration.apiKey("X-API-SIGN"); // signature authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessiontoken"] = await this.configuration.apiKey("sessiontoken"); // sessionToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-NONCE"] = await this.configuration.apiKey("X-API-NONCE"); // nonce authentication
        }

        const response = await this.request({
            path: `/private/pool/leave`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PrivatePoolLeavePostRequestToJSON(requestParameters['privatePoolLeavePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivatePoolJoinPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Leave a pool, it consumes the lp token and credits your balance with the corresponding currencies
     */
    async privatePoolLeavePost(requestParameters: PrivatePoolLeavePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivatePoolJoinPost200Response> {
        const response = await this.privatePoolLeavePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the user pool positions
     */
    async privatePoolPositionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivatePoolPositionsGet200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-SIGN"] = await this.configuration.apiKey("X-API-SIGN"); // signature authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessiontoken"] = await this.configuration.apiKey("sessiontoken"); // sessionToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-NONCE"] = await this.configuration.apiKey("X-API-NONCE"); // nonce authentication
        }

        const response = await this.request({
            path: `/private/pool/positions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PrivatePoolPositionsGet200ResponseInnerFromJSON));
    }

    /**
     * Get the user pool positions
     */
    async privatePoolPositionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivatePoolPositionsGet200ResponseInner>> {
        const response = await this.privatePoolPositionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * get a pool task (join/leave) by id
     */
    async privatePoolTaskGetRaw(requestParameters: PrivatePoolTaskGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivatePoolTasksGet200ResponseInner>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling privatePoolTaskGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['taskId'] != null) {
            queryParameters['task_id'] = requestParameters['taskId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-SIGN"] = await this.configuration.apiKey("X-API-SIGN"); // signature authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessiontoken"] = await this.configuration.apiKey("sessiontoken"); // sessionToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-NONCE"] = await this.configuration.apiKey("X-API-NONCE"); // nonce authentication
        }

        const response = await this.request({
            path: `/private/pool/task`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivatePoolTasksGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * get a pool task (join/leave) by id
     */
    async privatePoolTaskGet(requestParameters: PrivatePoolTaskGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivatePoolTasksGet200ResponseInner> {
        const response = await this.privatePoolTaskGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the user pool tasks (join/leave)
     */
    async privatePoolTasksGetRaw(requestParameters: PrivatePoolTasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivatePoolTasksGet200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['poolId'] != null) {
            queryParameters['pool_id'] = requestParameters['poolId'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['startTime'] != null) {
            queryParameters['start_time'] = requestParameters['startTime'];
        }

        if (requestParameters['endTime'] != null) {
            queryParameters['end_time'] = requestParameters['endTime'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-SIGN"] = await this.configuration.apiKey("X-API-SIGN"); // signature authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessiontoken"] = await this.configuration.apiKey("sessiontoken"); // sessionToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-NONCE"] = await this.configuration.apiKey("X-API-NONCE"); // nonce authentication
        }

        const response = await this.request({
            path: `/private/pool/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PrivatePoolTasksGet200ResponseInnerFromJSON));
    }

    /**
     * Get the user pool tasks (join/leave)
     */
    async privatePoolTasksGet(requestParameters: PrivatePoolTasksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivatePoolTasksGet200ResponseInner>> {
        const response = await this.privatePoolTasksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the public pool state (price, balance, positions)
     */
    async publicPoolStateGetRaw(requestParameters: PublicPoolStateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicPoolStateGet200Response>> {
        if (requestParameters['symbol'] == null) {
            throw new runtime.RequiredError(
                'symbol',
                'Required parameter "symbol" was null or undefined when calling publicPoolStateGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['symbol'] != null) {
            queryParameters['symbol'] = requestParameters['symbol'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-SIGN"] = await this.configuration.apiKey("X-API-SIGN"); // signature authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessiontoken"] = await this.configuration.apiKey("sessiontoken"); // sessionToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-NONCE"] = await this.configuration.apiKey("X-API-NONCE"); // nonce authentication
        }

        const response = await this.request({
            path: `/public/pool/state`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPoolStateGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the public pool state (price, balance, positions)
     */
    async publicPoolStateGet(requestParameters: PublicPoolStateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicPoolStateGet200Response> {
        const response = await this.publicPoolStateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all active pools
     */
    async publicPoolsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicPoolsGet200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/pools`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicPoolsGet200ResponseInnerFromJSON));
    }

    /**
     * Get all active pools
     */
    async publicPoolsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicPoolsGet200ResponseInner>> {
        const response = await this.publicPoolsGetRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PrivatePoolTasksGetTypeEnum = {
    Join: 'join',
    Leave: 'leave'
} as const;
export type PrivatePoolTasksGetTypeEnum = typeof PrivatePoolTasksGetTypeEnum[keyof typeof PrivatePoolTasksGetTypeEnum];
/**
 * @export
 */
export const PrivatePoolTasksGetStatusEnum = {
    Pending: 'pending',
    Processing: 'processing',
    Completed: 'completed',
    Failed: 'failed',
    Cancelled: 'cancelled'
} as const;
export type PrivatePoolTasksGetStatusEnum = typeof PrivatePoolTasksGetStatusEnum[keyof typeof PrivatePoolTasksGetStatusEnum];
