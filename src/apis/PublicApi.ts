/* tslint:disable */
/* eslint-disable */
/**
 * ExKoin API Documentation
 * API documentation for ExKoin Crypto exchange
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PublicCurrenciesGet200ResponseInner,
  PublicCurrenciesGetDefaultResponse,
  PublicExkConfigGet200Response,
  PublicExkRedeemPostRequest,
  PublicForexPricesGet200Response,
  PublicFundsTransparencyGet200Response,
  PublicGainsLossesTransparencyGet200Response,
  PublicMarketsGet200ResponseInner,
  PublicMarketsTickersListGet200ResponseInner,
  PublicNetworksGet200ResponseInner,
  PublicOhlcvGet200ResponseInner,
  PublicOrderbookGet200Response,
  PublicPoolsFeesHistoryGet200ResponseInner,
  PublicPoolsGet200ResponseInner,
  PublicTradesGet200ResponseInner,
} from '../models/index';
import {
    PublicCurrenciesGet200ResponseInnerFromJSON,
    PublicCurrenciesGet200ResponseInnerToJSON,
    PublicCurrenciesGetDefaultResponseFromJSON,
    PublicCurrenciesGetDefaultResponseToJSON,
    PublicExkConfigGet200ResponseFromJSON,
    PublicExkConfigGet200ResponseToJSON,
    PublicExkRedeemPostRequestFromJSON,
    PublicExkRedeemPostRequestToJSON,
    PublicForexPricesGet200ResponseFromJSON,
    PublicForexPricesGet200ResponseToJSON,
    PublicFundsTransparencyGet200ResponseFromJSON,
    PublicFundsTransparencyGet200ResponseToJSON,
    PublicGainsLossesTransparencyGet200ResponseFromJSON,
    PublicGainsLossesTransparencyGet200ResponseToJSON,
    PublicMarketsGet200ResponseInnerFromJSON,
    PublicMarketsGet200ResponseInnerToJSON,
    PublicMarketsTickersListGet200ResponseInnerFromJSON,
    PublicMarketsTickersListGet200ResponseInnerToJSON,
    PublicNetworksGet200ResponseInnerFromJSON,
    PublicNetworksGet200ResponseInnerToJSON,
    PublicOhlcvGet200ResponseInnerFromJSON,
    PublicOhlcvGet200ResponseInnerToJSON,
    PublicOrderbookGet200ResponseFromJSON,
    PublicOrderbookGet200ResponseToJSON,
    PublicPoolsFeesHistoryGet200ResponseInnerFromJSON,
    PublicPoolsFeesHistoryGet200ResponseInnerToJSON,
    PublicPoolsGet200ResponseInnerFromJSON,
    PublicPoolsGet200ResponseInnerToJSON,
    PublicTradesGet200ResponseInnerFromJSON,
    PublicTradesGet200ResponseInnerToJSON,
} from '../models/index';

export interface PublicExkRedeemPostOperationRequest {
    publicExkRedeemPostRequest: PublicExkRedeemPostRequest;
}

export interface PublicGainsLossesTransparencyGetRequest {
    unclaimedOnly?: any;
    period?: PublicGainsLossesTransparencyGetPeriodEnum;
}

export interface PublicOhlcvGetRequest {
    symbol: string;
    interval: number;
    page?: number;
    limit?: number;
    from?: number;
    to?: number;
}

export interface PublicOrderbookGetRequest {
    symbol: string;
    limit?: number;
}

export interface PublicPoolsFeesHistoryGetRequest {
    poolId?: string;
    startTime?: number;
    endTime?: number;
    limit?: number;
    page?: number;
}

export interface PublicTradesGetRequest {
    symbol: string;
    page?: number;
    limit?: number;
}

/**
 * PublicApi - interface
 * 
 * @export
 * @interface PublicApiInterface
 */
export interface PublicApiInterface {
    /**
     * Get all active currencies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    publicCurrenciesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicCurrenciesGet200ResponseInner>>>;

    /**
     * Get all active currencies
     */
    publicCurrenciesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicCurrenciesGet200ResponseInner>>;

    /**
     * Get the EXK token configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    publicExkConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicExkConfigGet200Response>>;

    /**
     * Get the EXK token configuration
     */
    publicExkConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicExkConfigGet200Response>;

    /**
     * Redeem EXK tokens
     * @param {PublicExkRedeemPostRequest} publicExkRedeemPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    publicExkRedeemPostRaw(requestParameters: PublicExkRedeemPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | undefined; }>>;

    /**
     * Redeem EXK tokens
     */
    publicExkRedeemPost(requestParameters: PublicExkRedeemPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | undefined; }>;

    /**
     * Get the EXK reserves
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    publicExkReservesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | undefined; }>>;

    /**
     * Get the EXK reserves
     */
    publicExkReservesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | undefined; }>;

    /**
     * Get the forex prices, base is in USD, eg. EUR, GBP, HKD, SGD, ... Data is from an external provider.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    publicForexPricesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicForexPricesGet200Response>>;

    /**
     * Get the forex prices, base is in USD, eg. EUR, GBP, HKD, SGD, ... Data is from an external provider.
     */
    publicForexPricesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicForexPricesGet200Response>;

    /**
     * Get the funds transparency data (overall exchange balances)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    publicFundsTransparencyGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicFundsTransparencyGet200Response>>;

    /**
     * Get the funds transparency data (overall exchange balances)
     */
    publicFundsTransparencyGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicFundsTransparencyGet200Response>;

    /**
     * Get transparency information about exchange gains and losses
     * @param {any} [unclaimedOnly] 
     * @param {'1d' | '7d' | '30d'} [period] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    publicGainsLossesTransparencyGetRaw(requestParameters: PublicGainsLossesTransparencyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicGainsLossesTransparencyGet200Response>>;

    /**
     * Get transparency information about exchange gains and losses
     */
    publicGainsLossesTransparencyGet(requestParameters: PublicGainsLossesTransparencyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicGainsLossesTransparencyGet200Response>;

    /**
     * Get all active markets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    publicMarketsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicMarketsGet200ResponseInner>>>;

    /**
     * Get all active markets
     */
    publicMarketsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicMarketsGet200ResponseInner>>;

    /**
     * Get the 24h tickers for all markets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    publicMarketsTickersListGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicMarketsTickersListGet200ResponseInner>>>;

    /**
     * Get the 24h tickers for all markets
     */
    publicMarketsTickersListGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicMarketsTickersListGet200ResponseInner>>;

    /**
     * Get all active networks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    publicNetworksGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicNetworksGet200ResponseInner>>>;

    /**
     * Get all active networks
     */
    publicNetworksGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicNetworksGet200ResponseInner>>;

    /**
     * Get the OHLCV data for a trading pair
     * @param {string} symbol 
     * @param {number} interval 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {number} [from] 
     * @param {number} [to] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    publicOhlcvGetRaw(requestParameters: PublicOhlcvGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicOhlcvGet200ResponseInner>>>;

    /**
     * Get the OHLCV data for a trading pair
     */
    publicOhlcvGet(requestParameters: PublicOhlcvGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicOhlcvGet200ResponseInner>>;

    /**
     * Get the orderbook for a trading pair
     * @param {string} symbol 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    publicOrderbookGetRaw(requestParameters: PublicOrderbookGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicOrderbookGet200Response>>;

    /**
     * Get the orderbook for a trading pair
     */
    publicOrderbookGet(requestParameters: PublicOrderbookGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicOrderbookGet200Response>;

    /**
     * Get the pool fees earnings history
     * @param {string} [poolId] 
     * @param {number} [startTime] 
     * @param {number} [endTime] 
     * @param {number} [limit] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    publicPoolsFeesHistoryGetRaw(requestParameters: PublicPoolsFeesHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicPoolsFeesHistoryGet200ResponseInner>>>;

    /**
     * Get the pool fees earnings history
     */
    publicPoolsFeesHistoryGet(requestParameters: PublicPoolsFeesHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicPoolsFeesHistoryGet200ResponseInner>>;

    /**
     * Get all active pools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    publicPoolsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicPoolsGet200ResponseInner>>>;

    /**
     * Get all active pools
     */
    publicPoolsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicPoolsGet200ResponseInner>>;

    /**
     * Get the public trades for a trading pair
     * @param {string} symbol 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    publicTradesGetRaw(requestParameters: PublicTradesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicTradesGet200ResponseInner>>>;

    /**
     * Get the public trades for a trading pair
     */
    publicTradesGet(requestParameters: PublicTradesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicTradesGet200ResponseInner>>;

}

/**
 * 
 */
export class PublicApi extends runtime.BaseAPI implements PublicApiInterface {

    /**
     * Get all active currencies
     */
    async publicCurrenciesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicCurrenciesGet200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/currencies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicCurrenciesGet200ResponseInnerFromJSON));
    }

    /**
     * Get all active currencies
     */
    async publicCurrenciesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicCurrenciesGet200ResponseInner>> {
        const response = await this.publicCurrenciesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the EXK token configuration
     */
    async publicExkConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicExkConfigGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/exk/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicExkConfigGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the EXK token configuration
     */
    async publicExkConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicExkConfigGet200Response> {
        const response = await this.publicExkConfigGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Redeem EXK tokens
     */
    async publicExkRedeemPostRaw(requestParameters: PublicExkRedeemPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | undefined; }>> {
        if (requestParameters['publicExkRedeemPostRequest'] == null) {
            throw new runtime.RequiredError(
                'publicExkRedeemPostRequest',
                'Required parameter "publicExkRedeemPostRequest" was null or undefined when calling publicExkRedeemPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/public/exk/redeem`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicExkRedeemPostRequestToJSON(requestParameters['publicExkRedeemPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Redeem EXK tokens
     */
    async publicExkRedeemPost(requestParameters: PublicExkRedeemPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | undefined; }> {
        const response = await this.publicExkRedeemPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the EXK reserves
     */
    async publicExkReservesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | undefined; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/exk/reserves`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the EXK reserves
     */
    async publicExkReservesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | undefined; }> {
        const response = await this.publicExkReservesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the forex prices, base is in USD, eg. EUR, GBP, HKD, SGD, ... Data is from an external provider.
     */
    async publicForexPricesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicForexPricesGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/forex-prices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicForexPricesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the forex prices, base is in USD, eg. EUR, GBP, HKD, SGD, ... Data is from an external provider.
     */
    async publicForexPricesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicForexPricesGet200Response> {
        const response = await this.publicForexPricesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the funds transparency data (overall exchange balances)
     */
    async publicFundsTransparencyGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicFundsTransparencyGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/funds-transparency`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicFundsTransparencyGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the funds transparency data (overall exchange balances)
     */
    async publicFundsTransparencyGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicFundsTransparencyGet200Response> {
        const response = await this.publicFundsTransparencyGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get transparency information about exchange gains and losses
     */
    async publicGainsLossesTransparencyGetRaw(requestParameters: PublicGainsLossesTransparencyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicGainsLossesTransparencyGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['unclaimedOnly'] != null) {
            queryParameters['unclaimed_only'] = requestParameters['unclaimedOnly'];
        }

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/gains-losses-transparency`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicGainsLossesTransparencyGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get transparency information about exchange gains and losses
     */
    async publicGainsLossesTransparencyGet(requestParameters: PublicGainsLossesTransparencyGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicGainsLossesTransparencyGet200Response> {
        const response = await this.publicGainsLossesTransparencyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all active markets
     */
    async publicMarketsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicMarketsGet200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/markets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicMarketsGet200ResponseInnerFromJSON));
    }

    /**
     * Get all active markets
     */
    async publicMarketsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicMarketsGet200ResponseInner>> {
        const response = await this.publicMarketsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the 24h tickers for all markets
     */
    async publicMarketsTickersListGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicMarketsTickersListGet200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/markets/tickers-list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicMarketsTickersListGet200ResponseInnerFromJSON));
    }

    /**
     * Get the 24h tickers for all markets
     */
    async publicMarketsTickersListGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicMarketsTickersListGet200ResponseInner>> {
        const response = await this.publicMarketsTickersListGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all active networks
     */
    async publicNetworksGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicNetworksGet200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/networks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicNetworksGet200ResponseInnerFromJSON));
    }

    /**
     * Get all active networks
     */
    async publicNetworksGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicNetworksGet200ResponseInner>> {
        const response = await this.publicNetworksGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the OHLCV data for a trading pair
     */
    async publicOhlcvGetRaw(requestParameters: PublicOhlcvGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicOhlcvGet200ResponseInner>>> {
        if (requestParameters['symbol'] == null) {
            throw new runtime.RequiredError(
                'symbol',
                'Required parameter "symbol" was null or undefined when calling publicOhlcvGet().'
            );
        }

        if (requestParameters['interval'] == null) {
            throw new runtime.RequiredError(
                'interval',
                'Required parameter "interval" was null or undefined when calling publicOhlcvGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['symbol'] != null) {
            queryParameters['symbol'] = requestParameters['symbol'];
        }

        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['from'] != null) {
            queryParameters['from'] = requestParameters['from'];
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = requestParameters['to'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/ohlcv`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicOhlcvGet200ResponseInnerFromJSON));
    }

    /**
     * Get the OHLCV data for a trading pair
     */
    async publicOhlcvGet(requestParameters: PublicOhlcvGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicOhlcvGet200ResponseInner>> {
        const response = await this.publicOhlcvGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the orderbook for a trading pair
     */
    async publicOrderbookGetRaw(requestParameters: PublicOrderbookGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicOrderbookGet200Response>> {
        if (requestParameters['symbol'] == null) {
            throw new runtime.RequiredError(
                'symbol',
                'Required parameter "symbol" was null or undefined when calling publicOrderbookGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['symbol'] != null) {
            queryParameters['symbol'] = requestParameters['symbol'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/orderbook`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicOrderbookGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the orderbook for a trading pair
     */
    async publicOrderbookGet(requestParameters: PublicOrderbookGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicOrderbookGet200Response> {
        const response = await this.publicOrderbookGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the pool fees earnings history
     */
    async publicPoolsFeesHistoryGetRaw(requestParameters: PublicPoolsFeesHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicPoolsFeesHistoryGet200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['poolId'] != null) {
            queryParameters['pool_id'] = requestParameters['poolId'];
        }

        if (requestParameters['startTime'] != null) {
            queryParameters['start_time'] = requestParameters['startTime'];
        }

        if (requestParameters['endTime'] != null) {
            queryParameters['end_time'] = requestParameters['endTime'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/pools/fees-history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicPoolsFeesHistoryGet200ResponseInnerFromJSON));
    }

    /**
     * Get the pool fees earnings history
     */
    async publicPoolsFeesHistoryGet(requestParameters: PublicPoolsFeesHistoryGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicPoolsFeesHistoryGet200ResponseInner>> {
        const response = await this.publicPoolsFeesHistoryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all active pools
     */
    async publicPoolsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicPoolsGet200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/pools`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicPoolsGet200ResponseInnerFromJSON));
    }

    /**
     * Get all active pools
     */
    async publicPoolsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicPoolsGet200ResponseInner>> {
        const response = await this.publicPoolsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the public trades for a trading pair
     */
    async publicTradesGetRaw(requestParameters: PublicTradesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicTradesGet200ResponseInner>>> {
        if (requestParameters['symbol'] == null) {
            throw new runtime.RequiredError(
                'symbol',
                'Required parameter "symbol" was null or undefined when calling publicTradesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['symbol'] != null) {
            queryParameters['symbol'] = requestParameters['symbol'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/trades`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicTradesGet200ResponseInnerFromJSON));
    }

    /**
     * Get the public trades for a trading pair
     */
    async publicTradesGet(requestParameters: PublicTradesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicTradesGet200ResponseInner>> {
        const response = await this.publicTradesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PublicGainsLossesTransparencyGetPeriodEnum = {
    _1d: '1d',
    _7d: '7d',
    _30d: '30d'
} as const;
export type PublicGainsLossesTransparencyGetPeriodEnum = typeof PublicGainsLossesTransparencyGetPeriodEnum[keyof typeof PublicGainsLossesTransparencyGetPeriodEnum];
