/* tslint:disable */
/* eslint-disable */
/**
 * ExKoin API Documentation
 * API documentation for ExKoin Crypto exchange
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PrivateBalancesGet200Response,
  PrivateDepositAddressGet200Response,
  PrivateDepositsGet200ResponseInner,
  PrivateWithdrawalsDetailGet200Response,
  PrivateWithdrawalsFinishPost200Response,
  PrivateWithdrawalsFinishPostRequest,
  PrivateWithdrawalsPreparePost200Response,
  PrivateWithdrawalsPreparePostRequest,
  PublicCurrenciesGetDefaultResponse,
} from '../models/index';
import {
    PrivateBalancesGet200ResponseFromJSON,
    PrivateBalancesGet200ResponseToJSON,
    PrivateDepositAddressGet200ResponseFromJSON,
    PrivateDepositAddressGet200ResponseToJSON,
    PrivateDepositsGet200ResponseInnerFromJSON,
    PrivateDepositsGet200ResponseInnerToJSON,
    PrivateWithdrawalsDetailGet200ResponseFromJSON,
    PrivateWithdrawalsDetailGet200ResponseToJSON,
    PrivateWithdrawalsFinishPost200ResponseFromJSON,
    PrivateWithdrawalsFinishPost200ResponseToJSON,
    PrivateWithdrawalsFinishPostRequestFromJSON,
    PrivateWithdrawalsFinishPostRequestToJSON,
    PrivateWithdrawalsPreparePost200ResponseFromJSON,
    PrivateWithdrawalsPreparePost200ResponseToJSON,
    PrivateWithdrawalsPreparePostRequestFromJSON,
    PrivateWithdrawalsPreparePostRequestToJSON,
    PublicCurrenciesGetDefaultResponseFromJSON,
    PublicCurrenciesGetDefaultResponseToJSON,
} from '../models/index';

export interface PrivateDepositAddressGetRequest {
    network: string;
    currency: string;
}

export interface PrivateDepositsGetRequest {
    currency?: string;
    network?: string;
    status?: PrivateDepositsGetStatusEnum;
    limit?: number;
    page?: number;
    startTime?: number;
    endTime?: number;
}

export interface PrivateWithdrawalGetRequest {
    id: string;
}

export interface PrivateWithdrawalsDetailGetRequest {
    currency: string;
    network: string;
}

export interface PrivateWithdrawalsFinishPostOperationRequest {
    privateWithdrawalsFinishPostRequest: PrivateWithdrawalsFinishPostRequest;
}

export interface PrivateWithdrawalsGetRequest {
    currency?: string;
    network?: string;
    limit?: number;
    status?: PrivateWithdrawalsGetStatusEnum;
    page?: number;
    startTime?: number;
    endTime?: number;
}

export interface PrivateWithdrawalsPreparePostOperationRequest {
    privateWithdrawalsPreparePostRequest: PrivateWithdrawalsPreparePostRequest;
}

/**
 * AccountApi - interface
 * 
 * @export
 * @interface AccountApiInterface
 */
export interface AccountApiInterface {
    /**
     * Get the user balances
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    privateBalancesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateBalancesGet200Response>>;

    /**
     * Get the user balances
     */
    privateBalancesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateBalancesGet200Response>;

    /**
     * Get a deposit address and informations for a currency/network pair
     * @param {string} network 
     * @param {string} currency 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    privateDepositAddressGetRaw(requestParameters: PrivateDepositAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateDepositAddressGet200Response>>;

    /**
     * Get a deposit address and informations for a currency/network pair
     */
    privateDepositAddressGet(requestParameters: PrivateDepositAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateDepositAddressGet200Response>;

    /**
     * Get the user deposits
     * @param {string} [currency] 
     * @param {string} [network] 
     * @param {'completed' | 'pending' | 'failed'} [status] 
     * @param {number} [limit] 
     * @param {number} [page] 
     * @param {number} [startTime] 
     * @param {number} [endTime] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    privateDepositsGetRaw(requestParameters: PrivateDepositsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivateDepositsGet200ResponseInner>>>;

    /**
     * Get the user deposits
     */
    privateDepositsGet(requestParameters: PrivateDepositsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivateDepositsGet200ResponseInner>>;

    /**
     * Get a specific withdrawal
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    privateWithdrawalGetRaw(requestParameters: PrivateWithdrawalGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateWithdrawalsFinishPost200Response>>;

    /**
     * Get a specific withdrawal
     */
    privateWithdrawalGet(requestParameters: PrivateWithdrawalGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateWithdrawalsFinishPost200Response>;

    /**
     * Get the withdrawal details for a currency/network pair
     * @param {string} currency 
     * @param {string} network 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    privateWithdrawalsDetailGetRaw(requestParameters: PrivateWithdrawalsDetailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateWithdrawalsDetailGet200Response>>;

    /**
     * Get the withdrawal details for a currency/network pair
     */
    privateWithdrawalsDetailGet(requestParameters: PrivateWithdrawalsDetailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateWithdrawalsDetailGet200Response>;

    /**
     * Finish a withdrawal (use the payload from prepare-withdraw)
     * @param {PrivateWithdrawalsFinishPostRequest} privateWithdrawalsFinishPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    privateWithdrawalsFinishPostRaw(requestParameters: PrivateWithdrawalsFinishPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateWithdrawalsFinishPost200Response>>;

    /**
     * Finish a withdrawal (use the payload from prepare-withdraw)
     */
    privateWithdrawalsFinishPost(requestParameters: PrivateWithdrawalsFinishPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateWithdrawalsFinishPost200Response>;

    /**
     * Get the user withdrawals
     * @param {string} [currency] 
     * @param {string} [network] 
     * @param {number} [limit] 
     * @param {'pending' | 'processing' | 'completed' | 'failed' | 'cancelled'} [status] 
     * @param {number} [page] 
     * @param {number} [startTime] 
     * @param {number} [endTime] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    privateWithdrawalsGetRaw(requestParameters: PrivateWithdrawalsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivateWithdrawalsFinishPost200Response>>>;

    /**
     * Get the user withdrawals
     */
    privateWithdrawalsGet(requestParameters: PrivateWithdrawalsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivateWithdrawalsFinishPost200Response>>;

    /**
     * Prepare a withdrawal, then you need to call withdraw-finish with the payload
     * @param {PrivateWithdrawalsPreparePostRequest} privateWithdrawalsPreparePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    privateWithdrawalsPreparePostRaw(requestParameters: PrivateWithdrawalsPreparePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateWithdrawalsPreparePost200Response>>;

    /**
     * Prepare a withdrawal, then you need to call withdraw-finish with the payload
     */
    privateWithdrawalsPreparePost(requestParameters: PrivateWithdrawalsPreparePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateWithdrawalsPreparePost200Response>;

}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI implements AccountApiInterface {

    /**
     * Get the user balances
     */
    async privateBalancesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateBalancesGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-SIGN"] = await this.configuration.apiKey("X-API-SIGN"); // signature authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessiontoken"] = await this.configuration.apiKey("sessiontoken"); // sessionToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-NONCE"] = await this.configuration.apiKey("X-API-NONCE"); // nonce authentication
        }

        const response = await this.request({
            path: `/private/balances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivateBalancesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the user balances
     */
    async privateBalancesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateBalancesGet200Response> {
        const response = await this.privateBalancesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a deposit address and informations for a currency/network pair
     */
    async privateDepositAddressGetRaw(requestParameters: PrivateDepositAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateDepositAddressGet200Response>> {
        if (requestParameters['network'] == null) {
            throw new runtime.RequiredError(
                'network',
                'Required parameter "network" was null or undefined when calling privateDepositAddressGet().'
            );
        }

        if (requestParameters['currency'] == null) {
            throw new runtime.RequiredError(
                'currency',
                'Required parameter "currency" was null or undefined when calling privateDepositAddressGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['network'] != null) {
            queryParameters['network'] = requestParameters['network'];
        }

        if (requestParameters['currency'] != null) {
            queryParameters['currency'] = requestParameters['currency'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-SIGN"] = await this.configuration.apiKey("X-API-SIGN"); // signature authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessiontoken"] = await this.configuration.apiKey("sessiontoken"); // sessionToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-NONCE"] = await this.configuration.apiKey("X-API-NONCE"); // nonce authentication
        }

        const response = await this.request({
            path: `/private/deposit-address`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivateDepositAddressGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a deposit address and informations for a currency/network pair
     */
    async privateDepositAddressGet(requestParameters: PrivateDepositAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateDepositAddressGet200Response> {
        const response = await this.privateDepositAddressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the user deposits
     */
    async privateDepositsGetRaw(requestParameters: PrivateDepositsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivateDepositsGet200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['currency'] != null) {
            queryParameters['currency'] = requestParameters['currency'];
        }

        if (requestParameters['network'] != null) {
            queryParameters['network'] = requestParameters['network'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['startTime'] != null) {
            queryParameters['start_time'] = requestParameters['startTime'];
        }

        if (requestParameters['endTime'] != null) {
            queryParameters['end_time'] = requestParameters['endTime'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-SIGN"] = await this.configuration.apiKey("X-API-SIGN"); // signature authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessiontoken"] = await this.configuration.apiKey("sessiontoken"); // sessionToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-NONCE"] = await this.configuration.apiKey("X-API-NONCE"); // nonce authentication
        }

        const response = await this.request({
            path: `/private/deposits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PrivateDepositsGet200ResponseInnerFromJSON));
    }

    /**
     * Get the user deposits
     */
    async privateDepositsGet(requestParameters: PrivateDepositsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivateDepositsGet200ResponseInner>> {
        const response = await this.privateDepositsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific withdrawal
     */
    async privateWithdrawalGetRaw(requestParameters: PrivateWithdrawalGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateWithdrawalsFinishPost200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling privateWithdrawalGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-SIGN"] = await this.configuration.apiKey("X-API-SIGN"); // signature authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessiontoken"] = await this.configuration.apiKey("sessiontoken"); // sessionToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-NONCE"] = await this.configuration.apiKey("X-API-NONCE"); // nonce authentication
        }

        const response = await this.request({
            path: `/private/withdrawal`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivateWithdrawalsFinishPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a specific withdrawal
     */
    async privateWithdrawalGet(requestParameters: PrivateWithdrawalGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateWithdrawalsFinishPost200Response> {
        const response = await this.privateWithdrawalGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the withdrawal details for a currency/network pair
     */
    async privateWithdrawalsDetailGetRaw(requestParameters: PrivateWithdrawalsDetailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateWithdrawalsDetailGet200Response>> {
        if (requestParameters['currency'] == null) {
            throw new runtime.RequiredError(
                'currency',
                'Required parameter "currency" was null or undefined when calling privateWithdrawalsDetailGet().'
            );
        }

        if (requestParameters['network'] == null) {
            throw new runtime.RequiredError(
                'network',
                'Required parameter "network" was null or undefined when calling privateWithdrawalsDetailGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['currency'] != null) {
            queryParameters['currency'] = requestParameters['currency'];
        }

        if (requestParameters['network'] != null) {
            queryParameters['network'] = requestParameters['network'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-SIGN"] = await this.configuration.apiKey("X-API-SIGN"); // signature authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessiontoken"] = await this.configuration.apiKey("sessiontoken"); // sessionToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-NONCE"] = await this.configuration.apiKey("X-API-NONCE"); // nonce authentication
        }

        const response = await this.request({
            path: `/private/withdrawals/detail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivateWithdrawalsDetailGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the withdrawal details for a currency/network pair
     */
    async privateWithdrawalsDetailGet(requestParameters: PrivateWithdrawalsDetailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateWithdrawalsDetailGet200Response> {
        const response = await this.privateWithdrawalsDetailGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Finish a withdrawal (use the payload from prepare-withdraw)
     */
    async privateWithdrawalsFinishPostRaw(requestParameters: PrivateWithdrawalsFinishPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateWithdrawalsFinishPost200Response>> {
        if (requestParameters['privateWithdrawalsFinishPostRequest'] == null) {
            throw new runtime.RequiredError(
                'privateWithdrawalsFinishPostRequest',
                'Required parameter "privateWithdrawalsFinishPostRequest" was null or undefined when calling privateWithdrawalsFinishPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-SIGN"] = await this.configuration.apiKey("X-API-SIGN"); // signature authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessiontoken"] = await this.configuration.apiKey("sessiontoken"); // sessionToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-NONCE"] = await this.configuration.apiKey("X-API-NONCE"); // nonce authentication
        }

        const response = await this.request({
            path: `/private/withdrawals/finish`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PrivateWithdrawalsFinishPostRequestToJSON(requestParameters['privateWithdrawalsFinishPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivateWithdrawalsFinishPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Finish a withdrawal (use the payload from prepare-withdraw)
     */
    async privateWithdrawalsFinishPost(requestParameters: PrivateWithdrawalsFinishPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateWithdrawalsFinishPost200Response> {
        const response = await this.privateWithdrawalsFinishPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the user withdrawals
     */
    async privateWithdrawalsGetRaw(requestParameters: PrivateWithdrawalsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivateWithdrawalsFinishPost200Response>>> {
        const queryParameters: any = {};

        if (requestParameters['currency'] != null) {
            queryParameters['currency'] = requestParameters['currency'];
        }

        if (requestParameters['network'] != null) {
            queryParameters['network'] = requestParameters['network'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['startTime'] != null) {
            queryParameters['start_time'] = requestParameters['startTime'];
        }

        if (requestParameters['endTime'] != null) {
            queryParameters['end_time'] = requestParameters['endTime'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-SIGN"] = await this.configuration.apiKey("X-API-SIGN"); // signature authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessiontoken"] = await this.configuration.apiKey("sessiontoken"); // sessionToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-NONCE"] = await this.configuration.apiKey("X-API-NONCE"); // nonce authentication
        }

        const response = await this.request({
            path: `/private/withdrawals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PrivateWithdrawalsFinishPost200ResponseFromJSON));
    }

    /**
     * Get the user withdrawals
     */
    async privateWithdrawalsGet(requestParameters: PrivateWithdrawalsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivateWithdrawalsFinishPost200Response>> {
        const response = await this.privateWithdrawalsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Prepare a withdrawal, then you need to call withdraw-finish with the payload
     */
    async privateWithdrawalsPreparePostRaw(requestParameters: PrivateWithdrawalsPreparePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateWithdrawalsPreparePost200Response>> {
        if (requestParameters['privateWithdrawalsPreparePostRequest'] == null) {
            throw new runtime.RequiredError(
                'privateWithdrawalsPreparePostRequest',
                'Required parameter "privateWithdrawalsPreparePostRequest" was null or undefined when calling privateWithdrawalsPreparePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-SIGN"] = await this.configuration.apiKey("X-API-SIGN"); // signature authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessiontoken"] = await this.configuration.apiKey("sessiontoken"); // sessionToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-NONCE"] = await this.configuration.apiKey("X-API-NONCE"); // nonce authentication
        }

        const response = await this.request({
            path: `/private/withdrawals/prepare`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PrivateWithdrawalsPreparePostRequestToJSON(requestParameters['privateWithdrawalsPreparePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivateWithdrawalsPreparePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Prepare a withdrawal, then you need to call withdraw-finish with the payload
     */
    async privateWithdrawalsPreparePost(requestParameters: PrivateWithdrawalsPreparePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateWithdrawalsPreparePost200Response> {
        const response = await this.privateWithdrawalsPreparePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PrivateDepositsGetStatusEnum = {
    Completed: 'completed',
    Pending: 'pending',
    Failed: 'failed'
} as const;
export type PrivateDepositsGetStatusEnum = typeof PrivateDepositsGetStatusEnum[keyof typeof PrivateDepositsGetStatusEnum];
/**
 * @export
 */
export const PrivateWithdrawalsGetStatusEnum = {
    Pending: 'pending',
    Processing: 'processing',
    Completed: 'completed',
    Failed: 'failed',
    Cancelled: 'cancelled'
} as const;
export type PrivateWithdrawalsGetStatusEnum = typeof PrivateWithdrawalsGetStatusEnum[keyof typeof PrivateWithdrawalsGetStatusEnum];
