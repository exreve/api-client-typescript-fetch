/**
 * ExKoin API Documentation
 * API documentation for ExKoin Crypto exchange
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { PrivateBalancesGet200Response, PrivateDepositAddressGet200Response, PrivateDepositsGet200ResponseInner, PrivateWithdrawalsDetailGet200Response, PrivateWithdrawalsFinishPost200Response, PrivateWithdrawalsFinishPostRequest, PrivateWithdrawalsPreparePost200Response, PrivateWithdrawalsPreparePostRequest } from '../models/index';
export interface PrivateDepositAddressGetRequest {
    network: string;
    currency: string;
}
export interface PrivateDepositsGetRequest {
    currency?: string;
    network?: string;
    status?: PrivateDepositsGetStatusEnum;
    limit?: number;
    page?: number;
    startTime?: number;
    endTime?: number;
}
export interface PrivateWithdrawalGetRequest {
    id: string;
}
export interface PrivateWithdrawalsDetailGetRequest {
    currency: string;
    network: string;
}
export interface PrivateWithdrawalsFinishPostOperationRequest {
    privateWithdrawalsFinishPostRequest: PrivateWithdrawalsFinishPostRequest;
}
export interface PrivateWithdrawalsGetRequest {
    currency?: string;
    network?: string;
    limit?: number;
    status?: PrivateWithdrawalsGetStatusEnum;
    page?: number;
    startTime?: number;
    endTime?: number;
}
export interface PrivateWithdrawalsPreparePostOperationRequest {
    privateWithdrawalsPreparePostRequest: PrivateWithdrawalsPreparePostRequest;
}
/**
 * AccountApi - interface
 *
 * @export
 * @interface AccountApiInterface
 */
export interface AccountApiInterface {
    /**
     * Get the user balances
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    privateBalancesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateBalancesGet200Response>>;
    /**
     * Get the user balances
     */
    privateBalancesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateBalancesGet200Response>;
    /**
     * Get a deposit address and informations for a currency/network pair
     * @param {string} network
     * @param {string} currency
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    privateDepositAddressGetRaw(requestParameters: PrivateDepositAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateDepositAddressGet200Response>>;
    /**
     * Get a deposit address and informations for a currency/network pair
     */
    privateDepositAddressGet(requestParameters: PrivateDepositAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateDepositAddressGet200Response>;
    /**
     * Get the user deposits
     * @param {string} [currency]
     * @param {string} [network]
     * @param {'completed' | 'pending' | 'failed'} [status]
     * @param {number} [limit]
     * @param {number} [page]
     * @param {number} [startTime]
     * @param {number} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    privateDepositsGetRaw(requestParameters: PrivateDepositsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivateDepositsGet200ResponseInner>>>;
    /**
     * Get the user deposits
     */
    privateDepositsGet(requestParameters: PrivateDepositsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivateDepositsGet200ResponseInner>>;
    /**
     * Get a specific withdrawal
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    privateWithdrawalGetRaw(requestParameters: PrivateWithdrawalGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateWithdrawalsFinishPost200Response>>;
    /**
     * Get a specific withdrawal
     */
    privateWithdrawalGet(requestParameters: PrivateWithdrawalGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateWithdrawalsFinishPost200Response>;
    /**
     * Get the withdrawal details for a currency/network pair
     * @param {string} currency
     * @param {string} network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    privateWithdrawalsDetailGetRaw(requestParameters: PrivateWithdrawalsDetailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateWithdrawalsDetailGet200Response>>;
    /**
     * Get the withdrawal details for a currency/network pair
     */
    privateWithdrawalsDetailGet(requestParameters: PrivateWithdrawalsDetailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateWithdrawalsDetailGet200Response>;
    /**
     * Finish a withdrawal (use the payload from prepare-withdraw)
     * @param {PrivateWithdrawalsFinishPostRequest} privateWithdrawalsFinishPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    privateWithdrawalsFinishPostRaw(requestParameters: PrivateWithdrawalsFinishPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateWithdrawalsFinishPost200Response>>;
    /**
     * Finish a withdrawal (use the payload from prepare-withdraw)
     */
    privateWithdrawalsFinishPost(requestParameters: PrivateWithdrawalsFinishPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateWithdrawalsFinishPost200Response>;
    /**
     * Get the user withdrawals
     * @param {string} [currency]
     * @param {string} [network]
     * @param {number} [limit]
     * @param {'pending' | 'processing' | 'completed' | 'failed' | 'cancelled'} [status]
     * @param {number} [page]
     * @param {number} [startTime]
     * @param {number} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    privateWithdrawalsGetRaw(requestParameters: PrivateWithdrawalsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivateWithdrawalsFinishPost200Response>>>;
    /**
     * Get the user withdrawals
     */
    privateWithdrawalsGet(requestParameters: PrivateWithdrawalsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivateWithdrawalsFinishPost200Response>>;
    /**
     * Prepare a withdrawal, then you need to call withdraw-finish with the payload
     * @param {PrivateWithdrawalsPreparePostRequest} privateWithdrawalsPreparePostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    privateWithdrawalsPreparePostRaw(requestParameters: PrivateWithdrawalsPreparePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateWithdrawalsPreparePost200Response>>;
    /**
     * Prepare a withdrawal, then you need to call withdraw-finish with the payload
     */
    privateWithdrawalsPreparePost(requestParameters: PrivateWithdrawalsPreparePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateWithdrawalsPreparePost200Response>;
}
/**
 *
 */
export declare class AccountApi extends runtime.BaseAPI implements AccountApiInterface {
    /**
     * Get the user balances
     */
    privateBalancesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateBalancesGet200Response>>;
    /**
     * Get the user balances
     */
    privateBalancesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateBalancesGet200Response>;
    /**
     * Get a deposit address and informations for a currency/network pair
     */
    privateDepositAddressGetRaw(requestParameters: PrivateDepositAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateDepositAddressGet200Response>>;
    /**
     * Get a deposit address and informations for a currency/network pair
     */
    privateDepositAddressGet(requestParameters: PrivateDepositAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateDepositAddressGet200Response>;
    /**
     * Get the user deposits
     */
    privateDepositsGetRaw(requestParameters: PrivateDepositsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivateDepositsGet200ResponseInner>>>;
    /**
     * Get the user deposits
     */
    privateDepositsGet(requestParameters?: PrivateDepositsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivateDepositsGet200ResponseInner>>;
    /**
     * Get a specific withdrawal
     */
    privateWithdrawalGetRaw(requestParameters: PrivateWithdrawalGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateWithdrawalsFinishPost200Response>>;
    /**
     * Get a specific withdrawal
     */
    privateWithdrawalGet(requestParameters: PrivateWithdrawalGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateWithdrawalsFinishPost200Response>;
    /**
     * Get the withdrawal details for a currency/network pair
     */
    privateWithdrawalsDetailGetRaw(requestParameters: PrivateWithdrawalsDetailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateWithdrawalsDetailGet200Response>>;
    /**
     * Get the withdrawal details for a currency/network pair
     */
    privateWithdrawalsDetailGet(requestParameters: PrivateWithdrawalsDetailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateWithdrawalsDetailGet200Response>;
    /**
     * Finish a withdrawal (use the payload from prepare-withdraw)
     */
    privateWithdrawalsFinishPostRaw(requestParameters: PrivateWithdrawalsFinishPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateWithdrawalsFinishPost200Response>>;
    /**
     * Finish a withdrawal (use the payload from prepare-withdraw)
     */
    privateWithdrawalsFinishPost(requestParameters: PrivateWithdrawalsFinishPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateWithdrawalsFinishPost200Response>;
    /**
     * Get the user withdrawals
     */
    privateWithdrawalsGetRaw(requestParameters: PrivateWithdrawalsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivateWithdrawalsFinishPost200Response>>>;
    /**
     * Get the user withdrawals
     */
    privateWithdrawalsGet(requestParameters?: PrivateWithdrawalsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivateWithdrawalsFinishPost200Response>>;
    /**
     * Prepare a withdrawal, then you need to call withdraw-finish with the payload
     */
    privateWithdrawalsPreparePostRaw(requestParameters: PrivateWithdrawalsPreparePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivateWithdrawalsPreparePost200Response>>;
    /**
     * Prepare a withdrawal, then you need to call withdraw-finish with the payload
     */
    privateWithdrawalsPreparePost(requestParameters: PrivateWithdrawalsPreparePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivateWithdrawalsPreparePost200Response>;
}
/**
 * @export
 */
export declare const PrivateDepositsGetStatusEnum: {
    readonly Completed: "completed";
    readonly Pending: "pending";
    readonly Failed: "failed";
};
export type PrivateDepositsGetStatusEnum = typeof PrivateDepositsGetStatusEnum[keyof typeof PrivateDepositsGetStatusEnum];
/**
 * @export
 */
export declare const PrivateWithdrawalsGetStatusEnum: {
    readonly Pending: "pending";
    readonly Processing: "processing";
    readonly Completed: "completed";
    readonly Failed: "failed";
    readonly Cancelled: "cancelled";
};
export type PrivateWithdrawalsGetStatusEnum = typeof PrivateWithdrawalsGetStatusEnum[keyof typeof PrivateWithdrawalsGetStatusEnum];
