"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * ExKoin API Documentation
 * API documentation for ExKoin Crypto exchange
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicGainsLossesTransparencyGetPeriodEnum = exports.PublicApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class PublicApi extends runtime.BaseAPI {
    /**
     * Get all active currencies
     */
    publicCurrenciesGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/public/currencies`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.PublicCurrenciesGet200ResponseInnerFromJSON));
        });
    }
    /**
     * Get all active currencies
     */
    publicCurrenciesGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.publicCurrenciesGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the EXK token configuration
     */
    publicExkConfigGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/public/exk/config`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PublicExkConfigGet200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get the EXK token configuration
     */
    publicExkConfigGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.publicExkConfigGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Redeem EXK tokens
     */
    publicExkRedeemPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['publicExkRedeemPostRequest'] == null) {
                throw new runtime.RequiredError('publicExkRedeemPostRequest', 'Required parameter "publicExkRedeemPostRequest" was null or undefined when calling publicExkRedeemPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/public/exk/redeem`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PublicExkRedeemPostRequestToJSON)(requestParameters['publicExkRedeemPostRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Redeem EXK tokens
     */
    publicExkRedeemPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.publicExkRedeemPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the EXK reserves
     */
    publicExkReservesGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/public/exk/reserves`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Get the EXK reserves
     */
    publicExkReservesGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.publicExkReservesGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the forex prices, base is in USD, eg. EUR, GBP, HKD, SGD, ... Data is from an external provider.
     */
    publicForexPricesGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/public/forex-prices`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PublicForexPricesGet200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get the forex prices, base is in USD, eg. EUR, GBP, HKD, SGD, ... Data is from an external provider.
     */
    publicForexPricesGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.publicForexPricesGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the funds transparency data (overall exchange balances)
     */
    publicFundsTransparencyGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/public/funds-transparency`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PublicFundsTransparencyGet200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get the funds transparency data (overall exchange balances)
     */
    publicFundsTransparencyGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.publicFundsTransparencyGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get transparency information about exchange gains and losses
     */
    publicGainsLossesTransparencyGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['unclaimedOnly'] != null) {
                queryParameters['unclaimed_only'] = requestParameters['unclaimedOnly'];
            }
            if (requestParameters['period'] != null) {
                queryParameters['period'] = requestParameters['period'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/public/gains-losses-transparency`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PublicGainsLossesTransparencyGet200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get transparency information about exchange gains and losses
     */
    publicGainsLossesTransparencyGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.publicGainsLossesTransparencyGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get all active markets
     */
    publicMarketsGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/public/markets`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.PublicMarketsGet200ResponseInnerFromJSON));
        });
    }
    /**
     * Get all active markets
     */
    publicMarketsGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.publicMarketsGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the 24h tickers for all markets
     */
    publicMarketsTickersListGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/public/markets/tickers-list`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.PublicMarketsTickersListGet200ResponseInnerFromJSON));
        });
    }
    /**
     * Get the 24h tickers for all markets
     */
    publicMarketsTickersListGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.publicMarketsTickersListGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get all active networks
     */
    publicNetworksGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/public/networks`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.PublicNetworksGet200ResponseInnerFromJSON));
        });
    }
    /**
     * Get all active networks
     */
    publicNetworksGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.publicNetworksGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the OHLCV data for a trading pair
     */
    publicOhlcvGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['symbol'] == null) {
                throw new runtime.RequiredError('symbol', 'Required parameter "symbol" was null or undefined when calling publicOhlcvGet().');
            }
            if (requestParameters['interval'] == null) {
                throw new runtime.RequiredError('interval', 'Required parameter "interval" was null or undefined when calling publicOhlcvGet().');
            }
            const queryParameters = {};
            if (requestParameters['symbol'] != null) {
                queryParameters['symbol'] = requestParameters['symbol'];
            }
            if (requestParameters['interval'] != null) {
                queryParameters['interval'] = requestParameters['interval'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['from'] != null) {
                queryParameters['from'] = requestParameters['from'];
            }
            if (requestParameters['to'] != null) {
                queryParameters['to'] = requestParameters['to'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/public/ohlcv`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.PublicOhlcvGet200ResponseInnerFromJSON));
        });
    }
    /**
     * Get the OHLCV data for a trading pair
     */
    publicOhlcvGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.publicOhlcvGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the orderbook for a trading pair
     */
    publicOrderbookGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['symbol'] == null) {
                throw new runtime.RequiredError('symbol', 'Required parameter "symbol" was null or undefined when calling publicOrderbookGet().');
            }
            const queryParameters = {};
            if (requestParameters['symbol'] != null) {
                queryParameters['symbol'] = requestParameters['symbol'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/public/orderbook`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PublicOrderbookGet200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get the orderbook for a trading pair
     */
    publicOrderbookGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.publicOrderbookGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the pool fees earnings history
     */
    publicPoolsFeesHistoryGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['poolId'] != null) {
                queryParameters['pool_id'] = requestParameters['poolId'];
            }
            if (requestParameters['startTime'] != null) {
                queryParameters['start_time'] = requestParameters['startTime'];
            }
            if (requestParameters['endTime'] != null) {
                queryParameters['end_time'] = requestParameters['endTime'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/public/pools/fees-history`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.PublicPoolsFeesHistoryGet200ResponseInnerFromJSON));
        });
    }
    /**
     * Get the pool fees earnings history
     */
    publicPoolsFeesHistoryGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.publicPoolsFeesHistoryGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get all active pools
     */
    publicPoolsGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/public/pools`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.PublicPoolsGet200ResponseInnerFromJSON));
        });
    }
    /**
     * Get all active pools
     */
    publicPoolsGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.publicPoolsGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the public trades for a trading pair
     */
    publicTradesGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['symbol'] == null) {
                throw new runtime.RequiredError('symbol', 'Required parameter "symbol" was null or undefined when calling publicTradesGet().');
            }
            const queryParameters = {};
            if (requestParameters['symbol'] != null) {
                queryParameters['symbol'] = requestParameters['symbol'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/public/trades`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.PublicTradesGet200ResponseInnerFromJSON));
        });
    }
    /**
     * Get the public trades for a trading pair
     */
    publicTradesGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.publicTradesGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.PublicApi = PublicApi;
/**
 * @export
 */
exports.PublicGainsLossesTransparencyGetPeriodEnum = {
    _1d: '1d',
    _7d: '7d',
    _30d: '30d'
};
