/**
 * ExKoin API Documentation
 * API documentation for ExKoin Crypto exchange
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { PrivatePoolJoinPost200Response, PrivatePoolJoinPostRequest, PrivatePoolLeavePostRequest, PrivatePoolPositionsGet200ResponseInner, PrivatePoolTasksGet200ResponseInner, PublicPoolStateGet200Response, PublicPoolsGet200ResponseInner } from '../models/index';
export interface PrivatePoolJoinPostOperationRequest {
    privatePoolJoinPostRequest: PrivatePoolJoinPostRequest;
}
export interface PrivatePoolLeavePostOperationRequest {
    privatePoolLeavePostRequest: PrivatePoolLeavePostRequest;
}
export interface PrivatePoolTaskGetRequest {
    taskId: string;
}
export interface PrivatePoolTasksGetRequest {
    poolId?: string;
    type?: PrivatePoolTasksGetTypeEnum;
    status?: PrivatePoolTasksGetStatusEnum;
    page?: number;
    limit?: number;
    startTime?: number;
    endTime?: number;
}
export interface PublicPoolStateGetRequest {
    symbol: string;
}
/**
 * PoolApi - interface
 *
 * @export
 * @interface PoolApiInterface
 */
export interface PoolApiInterface {
    /**
     * Join a pool, it will deduct the currencies from your balance, and you will be credited the corresponding lp token
     * @param {PrivatePoolJoinPostRequest} privatePoolJoinPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolApiInterface
     */
    privatePoolJoinPostRaw(requestParameters: PrivatePoolJoinPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivatePoolJoinPost200Response>>;
    /**
     * Join a pool, it will deduct the currencies from your balance, and you will be credited the corresponding lp token
     */
    privatePoolJoinPost(requestParameters: PrivatePoolJoinPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivatePoolJoinPost200Response>;
    /**
     * Leave a pool, it consumes the lp token and credits your balance with the corresponding currencies
     * @param {PrivatePoolLeavePostRequest} privatePoolLeavePostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolApiInterface
     */
    privatePoolLeavePostRaw(requestParameters: PrivatePoolLeavePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivatePoolJoinPost200Response>>;
    /**
     * Leave a pool, it consumes the lp token and credits your balance with the corresponding currencies
     */
    privatePoolLeavePost(requestParameters: PrivatePoolLeavePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivatePoolJoinPost200Response>;
    /**
     * Get the user pool positions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolApiInterface
     */
    privatePoolPositionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivatePoolPositionsGet200ResponseInner>>>;
    /**
     * Get the user pool positions
     */
    privatePoolPositionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivatePoolPositionsGet200ResponseInner>>;
    /**
     * get a pool task (join/leave) by id
     * @param {string} taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolApiInterface
     */
    privatePoolTaskGetRaw(requestParameters: PrivatePoolTaskGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivatePoolTasksGet200ResponseInner>>;
    /**
     * get a pool task (join/leave) by id
     */
    privatePoolTaskGet(requestParameters: PrivatePoolTaskGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivatePoolTasksGet200ResponseInner>;
    /**
     * Get the user pool tasks (join/leave)
     * @param {string} [poolId]
     * @param {'join' | 'leave'} [type]
     * @param {'pending' | 'processing' | 'completed' | 'failed' | 'cancelled'} [status]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {number} [startTime]
     * @param {number} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolApiInterface
     */
    privatePoolTasksGetRaw(requestParameters: PrivatePoolTasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivatePoolTasksGet200ResponseInner>>>;
    /**
     * Get the user pool tasks (join/leave)
     */
    privatePoolTasksGet(requestParameters: PrivatePoolTasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivatePoolTasksGet200ResponseInner>>;
    /**
     * Get the public pool state (price, balance, positions)
     * @param {string} symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolApiInterface
     */
    publicPoolStateGetRaw(requestParameters: PublicPoolStateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicPoolStateGet200Response>>;
    /**
     * Get the public pool state (price, balance, positions)
     */
    publicPoolStateGet(requestParameters: PublicPoolStateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicPoolStateGet200Response>;
    /**
     * Get all active pools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoolApiInterface
     */
    publicPoolsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicPoolsGet200ResponseInner>>>;
    /**
     * Get all active pools
     */
    publicPoolsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicPoolsGet200ResponseInner>>;
}
/**
 *
 */
export declare class PoolApi extends runtime.BaseAPI implements PoolApiInterface {
    /**
     * Join a pool, it will deduct the currencies from your balance, and you will be credited the corresponding lp token
     */
    privatePoolJoinPostRaw(requestParameters: PrivatePoolJoinPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivatePoolJoinPost200Response>>;
    /**
     * Join a pool, it will deduct the currencies from your balance, and you will be credited the corresponding lp token
     */
    privatePoolJoinPost(requestParameters: PrivatePoolJoinPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivatePoolJoinPost200Response>;
    /**
     * Leave a pool, it consumes the lp token and credits your balance with the corresponding currencies
     */
    privatePoolLeavePostRaw(requestParameters: PrivatePoolLeavePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivatePoolJoinPost200Response>>;
    /**
     * Leave a pool, it consumes the lp token and credits your balance with the corresponding currencies
     */
    privatePoolLeavePost(requestParameters: PrivatePoolLeavePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivatePoolJoinPost200Response>;
    /**
     * Get the user pool positions
     */
    privatePoolPositionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivatePoolPositionsGet200ResponseInner>>>;
    /**
     * Get the user pool positions
     */
    privatePoolPositionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivatePoolPositionsGet200ResponseInner>>;
    /**
     * get a pool task (join/leave) by id
     */
    privatePoolTaskGetRaw(requestParameters: PrivatePoolTaskGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrivatePoolTasksGet200ResponseInner>>;
    /**
     * get a pool task (join/leave) by id
     */
    privatePoolTaskGet(requestParameters: PrivatePoolTaskGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrivatePoolTasksGet200ResponseInner>;
    /**
     * Get the user pool tasks (join/leave)
     */
    privatePoolTasksGetRaw(requestParameters: PrivatePoolTasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrivatePoolTasksGet200ResponseInner>>>;
    /**
     * Get the user pool tasks (join/leave)
     */
    privatePoolTasksGet(requestParameters?: PrivatePoolTasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrivatePoolTasksGet200ResponseInner>>;
    /**
     * Get the public pool state (price, balance, positions)
     */
    publicPoolStateGetRaw(requestParameters: PublicPoolStateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicPoolStateGet200Response>>;
    /**
     * Get the public pool state (price, balance, positions)
     */
    publicPoolStateGet(requestParameters: PublicPoolStateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicPoolStateGet200Response>;
    /**
     * Get all active pools
     */
    publicPoolsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicPoolsGet200ResponseInner>>>;
    /**
     * Get all active pools
     */
    publicPoolsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicPoolsGet200ResponseInner>>;
}
/**
 * @export
 */
export declare const PrivatePoolTasksGetTypeEnum: {
    readonly Join: "join";
    readonly Leave: "leave";
};
export type PrivatePoolTasksGetTypeEnum = typeof PrivatePoolTasksGetTypeEnum[keyof typeof PrivatePoolTasksGetTypeEnum];
/**
 * @export
 */
export declare const PrivatePoolTasksGetStatusEnum: {
    readonly Pending: "pending";
    readonly Processing: "processing";
    readonly Completed: "completed";
    readonly Failed: "failed";
    readonly Cancelled: "cancelled";
};
export type PrivatePoolTasksGetStatusEnum = typeof PrivatePoolTasksGetStatusEnum[keyof typeof PrivatePoolTasksGetStatusEnum];
