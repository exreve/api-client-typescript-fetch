"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * ExKoin API Documentation
 * API documentation for ExKoin Crypto exchange
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrivateWithdrawalsGetStatusEnum = exports.PrivateDepositsGetStatusEnum = exports.AccountApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class AccountApi extends runtime.BaseAPI {
    /**
     * Get the user balances
     */
    privateBalancesGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = yield this.configuration.apiKey("X-API-KEY"); // apiKey authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-SIGN"] = yield this.configuration.apiKey("X-API-SIGN"); // signature authentication
            }
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["sessiontoken"] = yield this.configuration.apiKey("sessiontoken"); // sessionToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-NONCE"] = yield this.configuration.apiKey("X-API-NONCE"); // nonce authentication
            }
            const response = yield this.request({
                path: `/private/balances`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PrivateBalancesGet200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get the user balances
     */
    privateBalancesGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.privateBalancesGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a deposit address and informations for a currency/network pair
     */
    privateDepositAddressGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['network'] == null) {
                throw new runtime.RequiredError('network', 'Required parameter "network" was null or undefined when calling privateDepositAddressGet().');
            }
            if (requestParameters['currency'] == null) {
                throw new runtime.RequiredError('currency', 'Required parameter "currency" was null or undefined when calling privateDepositAddressGet().');
            }
            const queryParameters = {};
            if (requestParameters['network'] != null) {
                queryParameters['network'] = requestParameters['network'];
            }
            if (requestParameters['currency'] != null) {
                queryParameters['currency'] = requestParameters['currency'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = yield this.configuration.apiKey("X-API-KEY"); // apiKey authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-SIGN"] = yield this.configuration.apiKey("X-API-SIGN"); // signature authentication
            }
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["sessiontoken"] = yield this.configuration.apiKey("sessiontoken"); // sessionToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-NONCE"] = yield this.configuration.apiKey("X-API-NONCE"); // nonce authentication
            }
            const response = yield this.request({
                path: `/private/deposit-address`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PrivateDepositAddressGet200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get a deposit address and informations for a currency/network pair
     */
    privateDepositAddressGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.privateDepositAddressGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the user deposits
     */
    privateDepositsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['currency'] != null) {
                queryParameters['currency'] = requestParameters['currency'];
            }
            if (requestParameters['network'] != null) {
                queryParameters['network'] = requestParameters['network'];
            }
            if (requestParameters['status'] != null) {
                queryParameters['status'] = requestParameters['status'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['startTime'] != null) {
                queryParameters['start_time'] = requestParameters['startTime'];
            }
            if (requestParameters['endTime'] != null) {
                queryParameters['end_time'] = requestParameters['endTime'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = yield this.configuration.apiKey("X-API-KEY"); // apiKey authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-SIGN"] = yield this.configuration.apiKey("X-API-SIGN"); // signature authentication
            }
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["sessiontoken"] = yield this.configuration.apiKey("sessiontoken"); // sessionToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-NONCE"] = yield this.configuration.apiKey("X-API-NONCE"); // nonce authentication
            }
            const response = yield this.request({
                path: `/private/deposits`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.PrivateDepositsGet200ResponseInnerFromJSON));
        });
    }
    /**
     * Get the user deposits
     */
    privateDepositsGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.privateDepositsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a specific withdrawal
     */
    privateWithdrawalGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling privateWithdrawalGet().');
            }
            const queryParameters = {};
            if (requestParameters['id'] != null) {
                queryParameters['id'] = requestParameters['id'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = yield this.configuration.apiKey("X-API-KEY"); // apiKey authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-SIGN"] = yield this.configuration.apiKey("X-API-SIGN"); // signature authentication
            }
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["sessiontoken"] = yield this.configuration.apiKey("sessiontoken"); // sessionToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-NONCE"] = yield this.configuration.apiKey("X-API-NONCE"); // nonce authentication
            }
            const response = yield this.request({
                path: `/private/withdrawal`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PrivateWithdrawalsFinishPost200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get a specific withdrawal
     */
    privateWithdrawalGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.privateWithdrawalGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the withdrawal details for a currency/network pair
     */
    privateWithdrawalsDetailGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['currency'] == null) {
                throw new runtime.RequiredError('currency', 'Required parameter "currency" was null or undefined when calling privateWithdrawalsDetailGet().');
            }
            if (requestParameters['network'] == null) {
                throw new runtime.RequiredError('network', 'Required parameter "network" was null or undefined when calling privateWithdrawalsDetailGet().');
            }
            const queryParameters = {};
            if (requestParameters['currency'] != null) {
                queryParameters['currency'] = requestParameters['currency'];
            }
            if (requestParameters['network'] != null) {
                queryParameters['network'] = requestParameters['network'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = yield this.configuration.apiKey("X-API-KEY"); // apiKey authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-SIGN"] = yield this.configuration.apiKey("X-API-SIGN"); // signature authentication
            }
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["sessiontoken"] = yield this.configuration.apiKey("sessiontoken"); // sessionToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-NONCE"] = yield this.configuration.apiKey("X-API-NONCE"); // nonce authentication
            }
            const response = yield this.request({
                path: `/private/withdrawals/detail`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PrivateWithdrawalsDetailGet200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get the withdrawal details for a currency/network pair
     */
    privateWithdrawalsDetailGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.privateWithdrawalsDetailGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Finish a withdrawal (use the payload from prepare-withdraw)
     */
    privateWithdrawalsFinishPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['privateWithdrawalsFinishPostRequest'] == null) {
                throw new runtime.RequiredError('privateWithdrawalsFinishPostRequest', 'Required parameter "privateWithdrawalsFinishPostRequest" was null or undefined when calling privateWithdrawalsFinishPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = yield this.configuration.apiKey("X-API-KEY"); // apiKey authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-SIGN"] = yield this.configuration.apiKey("X-API-SIGN"); // signature authentication
            }
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["sessiontoken"] = yield this.configuration.apiKey("sessiontoken"); // sessionToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-NONCE"] = yield this.configuration.apiKey("X-API-NONCE"); // nonce authentication
            }
            const response = yield this.request({
                path: `/private/withdrawals/finish`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PrivateWithdrawalsFinishPostRequestToJSON)(requestParameters['privateWithdrawalsFinishPostRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PrivateWithdrawalsFinishPost200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Finish a withdrawal (use the payload from prepare-withdraw)
     */
    privateWithdrawalsFinishPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.privateWithdrawalsFinishPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the user withdrawals
     */
    privateWithdrawalsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['currency'] != null) {
                queryParameters['currency'] = requestParameters['currency'];
            }
            if (requestParameters['network'] != null) {
                queryParameters['network'] = requestParameters['network'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['status'] != null) {
                queryParameters['status'] = requestParameters['status'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['startTime'] != null) {
                queryParameters['start_time'] = requestParameters['startTime'];
            }
            if (requestParameters['endTime'] != null) {
                queryParameters['end_time'] = requestParameters['endTime'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = yield this.configuration.apiKey("X-API-KEY"); // apiKey authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-SIGN"] = yield this.configuration.apiKey("X-API-SIGN"); // signature authentication
            }
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["sessiontoken"] = yield this.configuration.apiKey("sessiontoken"); // sessionToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-NONCE"] = yield this.configuration.apiKey("X-API-NONCE"); // nonce authentication
            }
            const response = yield this.request({
                path: `/private/withdrawals`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.PrivateWithdrawalsFinishPost200ResponseFromJSON));
        });
    }
    /**
     * Get the user withdrawals
     */
    privateWithdrawalsGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.privateWithdrawalsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Prepare a withdrawal, then you need to call withdraw-finish with the payload
     */
    privateWithdrawalsPreparePostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['privateWithdrawalsPreparePostRequest'] == null) {
                throw new runtime.RequiredError('privateWithdrawalsPreparePostRequest', 'Required parameter "privateWithdrawalsPreparePostRequest" was null or undefined when calling privateWithdrawalsPreparePost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = yield this.configuration.apiKey("X-API-KEY"); // apiKey authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-SIGN"] = yield this.configuration.apiKey("X-API-SIGN"); // signature authentication
            }
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["sessiontoken"] = yield this.configuration.apiKey("sessiontoken"); // sessionToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-NONCE"] = yield this.configuration.apiKey("X-API-NONCE"); // nonce authentication
            }
            const response = yield this.request({
                path: `/private/withdrawals/prepare`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PrivateWithdrawalsPreparePostRequestToJSON)(requestParameters['privateWithdrawalsPreparePostRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PrivateWithdrawalsPreparePost200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Prepare a withdrawal, then you need to call withdraw-finish with the payload
     */
    privateWithdrawalsPreparePost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.privateWithdrawalsPreparePostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.AccountApi = AccountApi;
/**
 * @export
 */
exports.PrivateDepositsGetStatusEnum = {
    Completed: 'completed',
    Pending: 'pending',
    Failed: 'failed'
};
/**
 * @export
 */
exports.PrivateWithdrawalsGetStatusEnum = {
    Pending: 'pending',
    Processing: 'processing',
    Completed: 'completed',
    Failed: 'failed',
    Cancelled: 'cancelled'
};
