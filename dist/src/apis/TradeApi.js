"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * ExKoin API Documentation
 * API documentation for ExKoin Crypto exchange
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrivateTradesGetTakerOrMakerEnum = exports.PrivateTradesGetSideEnum = exports.PrivateOrdersGetSideEnum = exports.TradeApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class TradeApi extends runtime.BaseAPI {
    /**
     * Cancel all orders for a user
     */
    privateOrdersCancelAllPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['privateOrdersCancelAllPostRequest'] == null) {
                throw new runtime.RequiredError('privateOrdersCancelAllPostRequest', 'Required parameter "privateOrdersCancelAllPostRequest" was null or undefined when calling privateOrdersCancelAllPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = yield this.configuration.apiKey("X-API-KEY"); // apiKey authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-SIGN"] = yield this.configuration.apiKey("X-API-SIGN"); // signature authentication
            }
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["sessiontoken"] = yield this.configuration.apiKey("sessiontoken"); // sessionToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-NONCE"] = yield this.configuration.apiKey("X-API-NONCE"); // nonce authentication
            }
            const response = yield this.request({
                path: `/private/orders/cancel-all`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PrivateOrdersCancelAllPostRequestToJSON)(requestParameters['privateOrdersCancelAllPostRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.PrivateOrdersGet200ResponseInnerFromJSON));
        });
    }
    /**
     * Cancel all orders for a user
     */
    privateOrdersCancelAllPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.privateOrdersCancelAllPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Cancel an order
     */
    privateOrdersCancelPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['privateOrdersCancelPostRequest'] == null) {
                throw new runtime.RequiredError('privateOrdersCancelPostRequest', 'Required parameter "privateOrdersCancelPostRequest" was null or undefined when calling privateOrdersCancelPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = yield this.configuration.apiKey("X-API-KEY"); // apiKey authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-SIGN"] = yield this.configuration.apiKey("X-API-SIGN"); // signature authentication
            }
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["sessiontoken"] = yield this.configuration.apiKey("sessiontoken"); // sessionToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-NONCE"] = yield this.configuration.apiKey("X-API-NONCE"); // nonce authentication
            }
            const response = yield this.request({
                path: `/private/orders/cancel`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PrivateOrdersCancelPostRequestToJSON)(requestParameters['privateOrdersCancelPostRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PrivateOrdersGet200ResponseInnerFromJSON)(jsonValue));
        });
    }
    /**
     * Cancel an order
     */
    privateOrdersCancelPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.privateOrdersCancelPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the user orders
     */
    privateOrdersGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['symbol'] != null) {
                queryParameters['symbol'] = requestParameters['symbol'];
            }
            if (requestParameters['isOpen'] != null) {
                queryParameters['is_open'] = requestParameters['isOpen'];
            }
            if (requestParameters['hasFilled'] != null) {
                queryParameters['has_filled'] = requestParameters['hasFilled'];
            }
            if (requestParameters['side'] != null) {
                queryParameters['side'] = requestParameters['side'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = yield this.configuration.apiKey("X-API-KEY"); // apiKey authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-SIGN"] = yield this.configuration.apiKey("X-API-SIGN"); // signature authentication
            }
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["sessiontoken"] = yield this.configuration.apiKey("sessiontoken"); // sessionToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-NONCE"] = yield this.configuration.apiKey("X-API-NONCE"); // nonce authentication
            }
            const response = yield this.request({
                path: `/private/orders`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.PrivateOrdersGet200ResponseInnerFromJSON));
        });
    }
    /**
     * Get the user orders
     */
    privateOrdersGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.privateOrdersGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new order
     */
    privateOrdersPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['privateOrdersPostRequest'] == null) {
                throw new runtime.RequiredError('privateOrdersPostRequest', 'Required parameter "privateOrdersPostRequest" was null or undefined when calling privateOrdersPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = yield this.configuration.apiKey("X-API-KEY"); // apiKey authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-SIGN"] = yield this.configuration.apiKey("X-API-SIGN"); // signature authentication
            }
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["sessiontoken"] = yield this.configuration.apiKey("sessiontoken"); // sessionToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-NONCE"] = yield this.configuration.apiKey("X-API-NONCE"); // nonce authentication
            }
            const response = yield this.request({
                path: `/private/orders`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PrivateOrdersPostRequestToJSON)(requestParameters['privateOrdersPostRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PrivateOrdersGet200ResponseInnerFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new order
     */
    privateOrdersPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.privateOrdersPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the user trades
     */
    privateTradesGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['symbol'] != null) {
                queryParameters['symbol'] = requestParameters['symbol'];
            }
            if (requestParameters['side'] != null) {
                queryParameters['side'] = requestParameters['side'];
            }
            if (requestParameters['takerOrMaker'] != null) {
                queryParameters['taker_or_maker'] = requestParameters['takerOrMaker'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = yield this.configuration.apiKey("X-API-KEY"); // apiKey authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-SIGN"] = yield this.configuration.apiKey("X-API-SIGN"); // signature authentication
            }
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["sessiontoken"] = yield this.configuration.apiKey("sessiontoken"); // sessionToken authentication
            }
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-NONCE"] = yield this.configuration.apiKey("X-API-NONCE"); // nonce authentication
            }
            const response = yield this.request({
                path: `/private/trades`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.PrivateTradesGet200ResponseInnerFromJSON));
        });
    }
    /**
     * Get the user trades
     */
    privateTradesGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.privateTradesGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.TradeApi = TradeApi;
/**
 * @export
 */
exports.PrivateOrdersGetSideEnum = {
    Buy: 'buy',
    Sell: 'sell'
};
/**
 * @export
 */
exports.PrivateTradesGetSideEnum = {
    Buy: 'buy',
    Sell: 'sell'
};
/**
 * @export
 */
exports.PrivateTradesGetTakerOrMakerEnum = {
    Maker: 'maker',
    Taker: 'taker'
};
