"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * ExKoin API Documentation
 * API documentation for ExKoin Crypto exchange
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfPrivateWithdrawalsDetailGet200Response = instanceOfPrivateWithdrawalsDetailGet200Response;
exports.PrivateWithdrawalsDetailGet200ResponseFromJSON = PrivateWithdrawalsDetailGet200ResponseFromJSON;
exports.PrivateWithdrawalsDetailGet200ResponseFromJSONTyped = PrivateWithdrawalsDetailGet200ResponseFromJSONTyped;
exports.PrivateWithdrawalsDetailGet200ResponseToJSON = PrivateWithdrawalsDetailGet200ResponseToJSON;
exports.PrivateWithdrawalsDetailGet200ResponseToJSONTyped = PrivateWithdrawalsDetailGet200ResponseToJSONTyped;
const PublicNetworksGet200ResponseInner_1 = require("./PublicNetworksGet200ResponseInner");
const PublicCurrenciesGet200ResponseInner_1 = require("./PublicCurrenciesGet200ResponseInner");
/**
 * Check if a given object implements the PrivateWithdrawalsDetailGet200Response interface.
 */
function instanceOfPrivateWithdrawalsDetailGet200Response(value) {
    if (!('currency' in value) || value['currency'] === undefined)
        return false;
    if (!('network' in value) || value['network'] === undefined)
        return false;
    if (!('balance' in value) || value['balance'] === undefined)
        return false;
    if (!('feeUsd' in value) || value['feeUsd'] === undefined)
        return false;
    if (!('feeInCurrency' in value) || value['feeInCurrency'] === undefined)
        return false;
    if (!('maxWithdrawExchange' in value) || value['maxWithdrawExchange'] === undefined)
        return false;
    if (!('availableHot' in value) || value['availableHot'] === undefined)
        return false;
    if (!('availableHotAndCold' in value) || value['availableHotAndCold'] === undefined)
        return false;
    if (!('addressRegex' in value) || value['addressRegex'] === undefined)
        return false;
    if (!('minWithdrawAmount' in value) || value['minWithdrawAmount'] === undefined)
        return false;
    return true;
}
function PrivateWithdrawalsDetailGet200ResponseFromJSON(json) {
    return PrivateWithdrawalsDetailGet200ResponseFromJSONTyped(json, false);
}
function PrivateWithdrawalsDetailGet200ResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'currency': (0, PublicCurrenciesGet200ResponseInner_1.PublicCurrenciesGet200ResponseInnerFromJSON)(json['currency']),
        'network': (0, PublicNetworksGet200ResponseInner_1.PublicNetworksGet200ResponseInnerFromJSON)(json['network']),
        'balance': json['balance'],
        'feeUsd': json['fee_usd'],
        'feeInCurrency': json['fee_in_currency'],
        'maxWithdrawExchange': json['max_withdraw_exchange'],
        'availableHot': json['available_hot'],
        'availableHotAndCold': json['available_hot_and_cold'],
        'addressRegex': json['address_regex'],
        'minWithdrawAmount': json['min_withdraw_amount'],
        'isMemoRequired': json['is_memo_required'] == null ? undefined : json['is_memo_required'],
    };
}
function PrivateWithdrawalsDetailGet200ResponseToJSON(json) {
    return PrivateWithdrawalsDetailGet200ResponseToJSONTyped(json, false);
}
function PrivateWithdrawalsDetailGet200ResponseToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'currency': (0, PublicCurrenciesGet200ResponseInner_1.PublicCurrenciesGet200ResponseInnerToJSON)(value['currency']),
        'network': (0, PublicNetworksGet200ResponseInner_1.PublicNetworksGet200ResponseInnerToJSON)(value['network']),
        'balance': value['balance'],
        'fee_usd': value['feeUsd'],
        'fee_in_currency': value['feeInCurrency'],
        'max_withdraw_exchange': value['maxWithdrawExchange'],
        'available_hot': value['availableHot'],
        'available_hot_and_cold': value['availableHotAndCold'],
        'address_regex': value['addressRegex'],
        'min_withdraw_amount': value['minWithdrawAmount'],
        'is_memo_required': value['isMemoRequired'],
    };
}
